[
    {
        "comment": "/**\n * @module Creators\n */",
        "meta": {
            "range": [
                779,
                806
            ],
            "filename": "CreateEntityQuery.js",
            "lineno": 33,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {}
        },
        "kind": "module",
        "name": "Creators",
        "longname": "module:Creators",
        "___id": "T000002R000002",
        "___s": true
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "EntityQueryHockFactory"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1834,
                3113
            ],
            "filename": "CreateEntityQuery.js",
            "lineno": 54,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {
                "id": "astnode100000100",
                "name": "createEntityQuery",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "actionCreator"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "sideEffect"
            }
        ],
        "longname": "module:Creators.createEntityQuery",
        "name": "createEntityQuery",
        "memberof": "module:Creators",
        "scope": "static",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000018",
        "description": "<p>EntityQueries are the main way to request and receive entity state. For most components you will\nhave a query that should be fired on componentWillMount (also if certain props change) and you\nwould like the result of that query to be given to the component once it resolves.\n<code>createEntityQuery</code> wraps all this together in a factory that returns an\nEntityQueryHock. This lets you create different EntityQueryHocks for different side effects.\n<em>Note: A graphql based application often only needs one.</em></p>\n<p>Each EntityQueryHock will listen for a change in props and trigger the <code>queryCreator</code>\nfunction with the current props. The result of this will be given to the side effect.\nThe resulting data will be normalized and a reference will be stored under a auto-generated resultKey.\nThis result of this is selected along with it's <code>RequestState</code> and given to the decorated component as props.</p>",
        "comment": "/**\n * EntityQueries are the main way to request and receive entity state. For most components you will\n * have a query that should be fired on componentWillMount (also if certain props change) and you\n * would like the result of that query to be given to the component once it resolves.\n * `createEntityQuery` wraps all this together in a factory that returns an\n * EntityQueryHock. This lets you create different EntityQueryHocks for different side effects.\n * _Note: A graphql based application often only needs one._\n *\n * Each EntityQueryHock will listen for a change in props and trigger the `queryCreator`\n * function with the current props. The result of this will be given to the side effect.\n * The resulting data will be normalized and a reference will be stored under a auto-generated resultKey.\n * This result of this is selected along with it's `RequestState` and given to the decorated component as props.\n *\n * @param {function} sideEffect\n * @returns {EntityQueryHockFactory}\n * @memberof module:Creators\n */"
    },
    {
        "comment": "/**\n * @module Creators\n */",
        "meta": {
            "range": [
                685,
                712
            ],
            "filename": "CreateEntityReducer.js",
            "lineno": 30,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {}
        },
        "kind": "module",
        "name": "Creators",
        "longname": "module:Creators",
        "___id": "T000002R000028",
        "___s": true
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1768,
                5032
            ],
            "filename": "CreateEntityReducer.js",
            "lineno": 58,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {
                "id": "astnode100000349",
                "name": "createEntityReducer",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "config"
                ]
            },
            "vars": {
                "undefined": null,
                "initialState": "module:Creators.createEntityReducer~initialState",
                "defaultMeta": "module:Creators.createEntityReducer~defaultMeta",
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "<p>Map of schema action names.</p>",
                "name": "schemaMap"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "<p>config.afterNormalize function to edit payload data after it is normalized.</p>",
                "name": "config.afterNormalize"
            }
        ],
        "longname": "module:Creators.createEntityReducer",
        "examples": [
            "import {createEntityReducer} from 'enty';\nimport EntitySchema from 'myapp/EntitySchema';\n\nexport default combineReducers({\n    entity: createEntityReducer({\n         schemaMap: {\n             GRAPHQL_RECEIVE: EntitySchema,\n             MY_CUSTOM_ACTION_RECEIVE: EntitySchema.myCustomActionSchema\n         },\n         afterNormalize: (value, key) => value,\n    })\n});"
        ],
        "name": "createEntityReducer",
        "memberof": "module:Creators",
        "scope": "static",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000042",
        "description": "<p>Returns a reducer that normalizes data based on the [normalizr] schemas provided. When an action is fired, if the type matches one provied in <code>schemaMap</code> the payload is normalized based off the given schema.\nTakes a map of schemas where each key is an action name and value is a schema. must have at least one key called <code>mainSchema</code> returns a reducer that holds the main entity state.</p>",
        "comment": "/**\n * Returns a reducer that normalizes data based on the [normalizr] schemas provided. When an action is fired, if the type matches one provied in `schemaMap` the payload is normalized based off the given schema.\n * Takes a map of schemas where each key is an action name and value is a schema. must have at least one key called `mainSchema` returns a reducer that holds the main entity state.\n *\n * @example\n * import {createEntityReducer} from 'enty';\n * import EntitySchema from 'myapp/EntitySchema';\n *\n * export default combineReducers({\n *     entity: createEntityReducer({\n *          schemaMap: {\n *              GRAPHQL_RECEIVE: EntitySchema,\n *              MY_CUSTOM_ACTION_RECEIVE: EntitySchema.myCustomActionSchema\n *          },\n *          afterNormalize: (value, key) => value,\n *     })\n * });\n *\n * @param {object} schemaMap - Map of schema action names.\n * @param {function} config.afterNormalize - config.afterNormalize function to edit payload data after it is normalized.\n * @return {function}\n * @memberof module:Creators\n *\n */"
    },
    {
        "comment": "/**\n * @module Creators\n */",
        "meta": {
            "range": [
                639,
                666
            ],
            "filename": "CreateRequestActions.js",
            "lineno": 25,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {}
        },
        "kind": "module",
        "name": "Creators",
        "longname": "module:Creators",
        "___id": "T000002R000076",
        "___s": true
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "array"
                    ]
                },
                "description": "<p>list of action creators and action types</p>"
            }
        ],
        "meta": {
            "range": [
                1502,
                2110
            ],
            "filename": "CreateRequestActions.js",
            "lineno": 54,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {
                "id": "astnode100000862",
                "name": "createRequestActionSet",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "actionMap"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "<p>deep object representation of api functions</p>",
                "name": "actionMap"
            }
        ],
        "longname": "module:Creators.createRequestActionSet",
        "name": "createRequestActionSet",
        "memberof": "module:Creators",
        "scope": "static",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000079",
        "description": "<p>returns a <a href=\"thunk\">redux-thunk</a> action creator that will dispatch the three states of our request action.\ndispatch <code>fetchAction</code>\ncall <code>sideEffect</code>\nthen dispatch <code>recieveAction</code>\ncatch dispatch <code>errorAction</code></p>",
        "comment": "/**\n * returns a [redux-thunk](thunk) action creator that will dispatch the three states of our request action.\n * dispatch `fetchAction`\n * call `sideEffect`\n * then dispatch `recieveAction`\n * catch dispatch `errorAction`\n *\n * @param  {object} actionMap deep object representation of api functions\n * @return {array}            list of action creators and action types\n * @memberof module:Creators\n */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "array"
                    ]
                },
                "description": "<p>list of action creators and action types</p>"
            }
        ],
        "meta": {
            "range": [
                2515,
                3525
            ],
            "filename": "CreateRequestActions.js",
            "lineno": 75,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {
                "id": "astnode100000977",
                "name": "createRequestAction",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "fetchAction",
                    "recieveAction",
                    "errorAction",
                    "sideEffect"
                ]
            },
            "vars": {
                "action": "module:Creators.createRequestAction~action",
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<p>action name for fetching action</p>",
                "name": "fetchAction"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<p>action name for receiving action</p>",
                "name": "recieveAction"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<p>action name for error action</p>",
                "name": "errorAction"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "<p>Promise returning side effect to call after fetch action.</p>",
                "name": "sideEffect"
            }
        ],
        "longname": "module:Creators.createRequestAction",
        "name": "createRequestAction",
        "memberof": "module:Creators",
        "scope": "static",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000084",
        "comment": "/**\n *\n * @param {string} fetchAction     action name for fetching action\n * @param {string} recieveAction   action name for receiving action\n * @param {string} errorAction     action name for error action\n * @param {function} sideEffect    Promise returning side effect to call after fetch action.\n * @return {array}            list of action creators and action types\n * @memberof module:Creators\n */"
    },
    {
        "comment": "/**\n * @module Actions\n */",
        "meta": {
            "range": [
                189,
                215
            ],
            "filename": "DeleteEntityAction.js",
            "lineno": 10,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {}
        },
        "kind": "module",
        "name": "Actions",
        "longname": "module:Actions",
        "___id": "T000002R000099",
        "___s": true
    },
    {
        "meta": {
            "range": [
                407,
                538
            ],
            "filename": "DeleteEntityAction.js",
            "lineno": 20,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {
                "id": "astnode100001194",
                "name": "deleteEntity",
                "type": "AssignmentExpression",
                "value": "exports.deleteEntity"
            }
        },
        "longname": "module:Actions.deleteEntity",
        "name": "deleteEntity",
        "memberof": "module:Actions",
        "scope": "static",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000104",
        "description": "<p>Returns an action creator that takes an entity key path as its payload\nThe entity reducer will then mark that entity as deleted.</p>",
        "comment": "/**\n * Returns an action creator that takes an entity key path as its payload\n * The entity reducer will then mark that entity as deleted.\n * @function\n * @memberof module:Actions\n */"
    },
    {
        "meta": {
            "range": [
                738,
                882
            ],
            "filename": "DeleteEntityAction.js",
            "lineno": 29,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {
                "id": "astnode100001215",
                "name": "undoDeleteEntity",
                "type": "AssignmentExpression",
                "value": "exports.undoDeleteEntity"
            }
        },
        "longname": "module:Actions.undoDeleteEntity",
        "name": "undoDeleteEntity",
        "memberof": "module:Actions",
        "scope": "static",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000106",
        "description": "<p>Returns an action creator that takes an entity key path as its payload\nThe entity reducer will then mark that entity as NOT deleted.</p>",
        "comment": "/**\n * Returns an action creator that takes an entity key path as its payload\n * The entity reducer will then mark that entity as NOT deleted.\n *\n * @function\n * @memberof module:Actions\n */"
    },
    {
        "comment": "/**\n * @module Selectors\n */",
        "meta": {
            "range": [
                590,
                618
            ],
            "filename": "EntitySelector.js",
            "lineno": 22,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {}
        },
        "kind": "module",
        "name": "Selectors",
        "longname": "module:Selectors",
        "___id": "T000002R000108",
        "___s": true
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "<p>entity map</p>"
            }
        ],
        "meta": {
            "range": [
                905,
                1323
            ],
            "filename": "EntitySelector.js",
            "lineno": 34,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {
                "id": "astnode100001311",
                "name": "selectEntityByResult",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "",
                    "resultKey",
                    "schemaKey"
                ]
            },
            "vars": {
                "data": "module:Selectors.selectEntityByResult~data",
                "newData": "module:Selectors.selectEntityByResult~newData"
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "state"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "resultKey"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "ENTITY_RECEIVE",
                "name": "schemaKey"
            }
        ],
        "longname": "module:Selectors.selectEntityByResult",
        "name": "selectEntityByResult",
        "memberof": "module:Selectors",
        "scope": "static",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000120",
        "description": "<p>The primary means of accessing entity state. Given a requestKey it will return the denormalized state object.</p>",
        "comment": "/**\n * The primary means of accessing entity state. Given a requestKey it will return the denormalized state object.\n * @param  {object} state\n * @param  {string} resultKey\n * @param  {string} [schemaKey=ENTITY_RECEIVE]\n * @return {object} entity map\n * @memberof module:Selectors\n */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "<p>entity map</p>"
            }
        ],
        "meta": {
            "range": [
                1741,
                2071
            ],
            "filename": "EntitySelector.js",
            "lineno": 54,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {
                "id": "astnode100001379",
                "name": "selectEntityById",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "",
                    "type",
                    "id",
                    "schemaKey"
                ]
            },
            "vars": {
                "data": "module:Selectors.selectEntityById~data"
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "state"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "ENTITY_RECEIVE",
                "name": "schemaKey"
            }
        ],
        "longname": "module:Selectors.selectEntityById",
        "name": "selectEntityById",
        "memberof": "module:Selectors",
        "scope": "static",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000124",
        "description": "<p>Given a type and id of and entity in state it will return the denormalized state.\nThis function is only used when you are certain you need the exact id in entity state.\nMost often the request key is more appropriate.</p>",
        "comment": "/**\n * Given a type and id of and entity in state it will return the denormalized state.\n * This function is only used when you are certain you need the exact id in entity state.\n * Most often the request key is more appropriate.\n * @param  {object} state\n * @param  {string} type\n * @param  {string} id\n * @param  {string} [schemaKey=ENTITY_RECEIVE]\n * @return {object} entity map\n * @memberof module:Selectors\n */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Immutable.List"
                    ]
                },
                "description": "<p>entity list</p>"
            }
        ],
        "meta": {
            "range": [
                2289,
                2651
            ],
            "filename": "EntitySelector.js",
            "lineno": 70,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {
                "id": "astnode100001438",
                "name": "selectEntityByType",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "",
                    "type",
                    "schemaKey"
                ]
            },
            "vars": {
                "data": "module:Selectors.selectEntityByType~data"
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "state"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "ENTITY_RECEIVE",
                "name": "schemaKey"
            }
        ],
        "longname": "module:Selectors.selectEntityByType",
        "name": "selectEntityByType",
        "memberof": "module:Selectors",
        "scope": "static",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000127",
        "description": "<p>Access a whole entity type as a list</p>",
        "comment": "/**\n * Access a whole entity type as a list\n * @param  {object} state\n * @param  {string} type\n * @param  {string} [schemaKey=ENTITY_RECEIVE]\n * @return {Immutable.List} entity list\n * @memberof module:Selectors\n */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "<p>componentCreator    function to pass react component</p>"
            }
        ],
        "meta": {
            "range": [
                1000,
                1652
            ],
            "filename": "LocalStateHock.jsx",
            "lineno": 27,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {
                "id": "astnode100001563",
                "name": "LocalStateHock",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "reducer"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "<p>a function that acts as a local reducer</p>",
                "name": "reducer"
            }
        ],
        "longname": "module:Misc.LocalStateHock",
        "name": "LocalStateHock",
        "memberof": "module:Misc",
        "scope": "static",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000138",
        "description": "<p><code>LocalStateHock(reducer: function(state, action)) =&gt; function(component: Component)</code>\nWraps a component with a tiny implementation of the redux concept. Takes a reducer and returns a function ready to call with a component. The hock gives the component <code>props.localDispatch</code>which triggers the reducer. the return state of the reducer is then destructured on to the components as props.</p>",
        "comment": "/**\n * `LocalStateHock(reducer: function(state, action)) => function(component: Component)`\nWraps a component with a tiny implementation of the redux concept. Takes a reducer and returns a function ready to call with a component. The hock gives the component `props.localDispatch`which triggers the reducer. the return state of the reducer is then destructured on to the components as props.\n * @param  {function}   reducer             a function that acts as a local reducer\n * @return {function}   componentCreator    function to pass react component\n * @function\n * @memberof module:Misc\n */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "<p>componentCreator    function to pass react component</p>"
            }
        ],
        "meta": {
            "range": [
                1065,
                2557
            ],
            "filename": "PropChangeHock.jsx",
            "lineno": 36,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {
                "id": "astnode100001945",
                "name": "PropChangeHock",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "propKeys",
                    "outputFunction"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "<p>list of strings of prop keys</p>",
                "name": "propKeys"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "outputFunction"
            }
        ],
        "longname": "module:Misc.PropChangeHock",
        "name": "PropChangeHock",
        "memberof": "module:Misc",
        "scope": "static",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000185",
        "description": "<pre class=\"prettyprint source lang-js\"><code>PropChangeHock(propKeys: [String], sideEffect: function) => (component: Component) => Component</code></pre><p>The prop change hock takes a side effect and an array of prop keys paths.\nThe component then listens for component mount and receive props.\nIf any of the provided props change the side effect is triggered.</p>",
        "comment": "/**\n * ```js\n * PropChangeHock(propKeys: [String], sideEffect: function) => (component: Component) => Component\n * ```\n * The prop change hock takes a side effect and an array of prop keys paths.\n * The component then listens for component mount and receive props.\n * If any of the provided props change the side effect is triggered.\n * @param  {Array}      propKeys            list of strings of prop keys\n * @param  {function}   outputFunction\n * @return {function}   componentCreator    function to pass react component\n * @function\n * @memberof module:Misc\n */"
    },
    {
        "comment": "/**\n * @module Actions\n */",
        "meta": {
            "range": [
                163,
                189
            ],
            "filename": "ReceiveEntityAction.js",
            "lineno": 10,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {}
        },
        "kind": "module",
        "name": "Actions",
        "longname": "module:Actions",
        "___id": "T000002R000197",
        "___s": true
    },
    {
        "meta": {
            "range": [
                311,
                445
            ],
            "filename": "ReceiveEntityAction.js",
            "lineno": 19,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {
                "id": "astnode100002143",
                "name": "receiveEntity",
                "type": "AssignmentExpression",
                "value": "exports.receiveEntity"
            }
        },
        "longname": "module:Actions.receiveEntity",
        "name": "receiveEntity",
        "memberof": "module:Actions",
        "scope": "static",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000201",
        "description": "<p>Returns an action creator that will trigger an entity receive</p>",
        "comment": "/**\n * Returns an action creator that will trigger an entity receive\n * @function\n * @memberof module:Actions\n */"
    },
    {
        "comment": "/**\n * @module Selectors\n */",
        "meta": {
            "range": [
                159,
                187
            ],
            "filename": "RequestStateSelector.js",
            "lineno": 10,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {}
        },
        "kind": "module",
        "name": "Selectors",
        "longname": "module:Selectors",
        "___id": "T000002R000203",
        "___s": true
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "<p>the curerent request state</p>"
            }
        ],
        "meta": {
            "range": [
                506,
                656
            ],
            "filename": "RequestStateSelector.js",
            "lineno": 21,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {
                "id": "astnode100002188",
                "name": "selectRequestState",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "state",
                    "requestStateKey"
                ]
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "<p>the current state</p>",
                "name": "state"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<p>either result key or action prefix</p>",
                "name": "requestStateKey"
            }
        ],
        "longname": "module:Selectors.selectRequestState",
        "name": "selectRequestState",
        "memberof": "module:Selectors",
        "scope": "static",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000207",
        "description": "<p>Returns the state of a current request. Either fetching, error or not yet requested.</p>",
        "comment": "/**\n * Returns the state of a current request. Either fetching, error or not yet requested.\n * @param  {object} state            the current state\n * @param  {string} requestStateKey  either result key or action prefix\n * @return {object}                  the curerent request state\n * @memberof module:Selectors\n */"
    },
    {
        "comment": "/**\n * @module Misc\n */",
        "meta": {
            "range": [
                383,
                406
            ],
            "filename": "connectWithQuery.jsx",
            "lineno": 16,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {}
        },
        "kind": "module",
        "name": "Misc",
        "longname": "module:Misc",
        "___id": "T000002R000417",
        "___s": true
    },
    {
        "meta": {
            "range": [
                474,
                815
            ],
            "filename": "connectWithQuery.jsx",
            "lineno": 25,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {
                "id": "astnode100005703",
                "name": "connectWithQuery",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "connector",
                    "query",
                    "propChangeList"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [],
        "longname": "module:Misc.connectWithQuery",
        "name": "connectWithQuery",
        "memberof": "module:Misc",
        "scope": "static",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000425",
        "description": "<p>connectWithQuery</p>",
        "comment": "/**\n * connectWithQuery\n * @function\n * @memberof module:Misc\n */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "EntityQueryHockApplier"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                0,
                232
            ],
            "filename": "JsdocTypes.js",
            "lineno": 1,
            "path": "/Users/allanhortle/localhost/code/enty/src/decls",
            "code": {}
        },
        "params": [
            {
                "type": {
                    "names": [
                        "QueryCreator"
                    ]
                },
                "name": "queryCreator"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "optional": true,
                "description": "<p>Description</p>",
                "name": "propUpdateKeys"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "<p>Description</p>",
                "name": "metaOverride"
            }
        ],
        "longname": "EntityQueryHockFactory",
        "name": "EntityQueryHockFactory",
        "scope": "global",
        "kind": "typedef",
        "___s": true,
        "___id": "T000002R000428",
        "type": {
            "names": [
                "function"
            ]
        },
        "comment": "/**\n * @callback EntityQueryHockFactory\n *\n * @param {QueryCreator} queryCreator\n *\n * @param {string[]} [propUpdateKeys]\n * Description\n *\n * @param {Object} [metaOverride]\n * Description\n *\n * @returns {EntityQueryHockApplier}\n */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Component"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                234,
                343
            ],
            "filename": "JsdocTypes.js",
            "lineno": 15,
            "path": "/Users/allanhortle/localhost/code/enty/src/decls",
            "code": {}
        },
        "params": [
            {
                "type": {
                    "names": [
                        "Component"
                    ]
                },
                "name": "componentToDecorate"
            }
        ],
        "longname": "EntityQueryHockApplier",
        "name": "EntityQueryHockApplier",
        "scope": "global",
        "kind": "typedef",
        "___s": true,
        "___id": "T000002R000429",
        "type": {
            "names": [
                "function"
            ]
        },
        "comment": "/**\n* @callback EntityQueryHockApplier\n*\n* @param {Component} componentToDecorate\n*\n* @returns {Component}\n*/"
    },
    {
        "meta": {
            "range": [
                345,
                502
            ],
            "filename": "JsdocTypes.js",
            "lineno": 23,
            "path": "/Users/allanhortle/localhost/code/enty/src/decls",
            "code": {}
        },
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "<p>Description</p>",
                "name": "props"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "<p>Description</p>",
                "name": "state"
            }
        ],
        "longname": "QueryCreator",
        "name": "QueryCreator",
        "scope": "global",
        "kind": "typedef",
        "___s": true,
        "___id": "T000002R000430",
        "type": {
            "names": [
                "function"
            ]
        },
        "description": "<p>QueryCreator Description</p>",
        "comment": "/**\n * QueryCreator Description\n *\n * @callback QueryCreator\n *\n * @param {Object} [props]\n * Description\n *\n * @param {Object} [state]\n * Description\n *\n */"
    },
    {
        "meta": {
            "range": [
                518,
                648
            ],
            "filename": "JsdocTypes.js",
            "lineno": 38,
            "path": "/Users/allanhortle/localhost/code/enty/src/decls",
            "code": {}
        },
        "longname": "Iterable",
        "name": "Iterable",
        "see": [
            "https://facebook.github.io/immutable-js/docs/#/Iterable"
        ],
        "scope": "global",
        "kind": "typedef",
        "___s": true,
        "tags": [
            {
                "originalTitle": "noexpand",
                "title": "noexpand",
                "text": ""
            }
        ],
        "___id": "T000002R000431",
        "description": "<p>Immutable.js Iterable</p>",
        "comment": "/**\n * Immutable.js Iterable\n * @typedef Iterable\n * @noexpand\n * @see https://facebook.github.io/immutable-js/docs/#/Iterable\n */"
    },
    {
        "meta": {
            "range": [
                650,
                768
            ],
            "filename": "JsdocTypes.js",
            "lineno": 45,
            "path": "/Users/allanhortle/localhost/code/enty/src/decls",
            "code": {}
        },
        "longname": "List",
        "name": "List",
        "see": [
            "https://facebook.github.io/immutable-js/docs/#/List"
        ],
        "scope": "global",
        "kind": "typedef",
        "___s": true,
        "tags": [
            {
                "originalTitle": "noexpand",
                "title": "noexpand",
                "text": ""
            }
        ],
        "___id": "T000002R000432",
        "description": "<p>Immutable.js List</p>",
        "comment": "/**\n * Immutable.js List\n * @typedef List\n * @noexpand\n * @see https://facebook.github.io/immutable-js/docs/#/List\n */"
    },
    {
        "meta": {
            "range": [
                770,
                885
            ],
            "filename": "JsdocTypes.js",
            "lineno": 52,
            "path": "/Users/allanhortle/localhost/code/enty/src/decls",
            "code": {}
        },
        "longname": "Map",
        "name": "Map",
        "see": [
            "https://facebook.github.io/immutable-js/docs/#/Map"
        ],
        "scope": "global",
        "kind": "typedef",
        "___s": true,
        "tags": [
            {
                "originalTitle": "noexpand",
                "title": "noexpand",
                "text": ""
            }
        ],
        "___id": "T000002R000433",
        "description": "<p>Immutable.js Map</p>",
        "comment": "/**\n * Immutable.js Map\n * @typedef Map\n * @noexpand\n * @see https://facebook.github.io/immutable-js/docs/#/Map\n */"
    },
    {
        "meta": {
            "range": [
                887,
                1023
            ],
            "filename": "JsdocTypes.js",
            "lineno": 59,
            "path": "/Users/allanhortle/localhost/code/enty/src/decls",
            "code": {}
        },
        "longname": "OrderedMap",
        "name": "OrderedMap",
        "see": [
            "https://facebook.github.io/immutable-js/docs/#/OrderedMap"
        ],
        "scope": "global",
        "kind": "typedef",
        "___s": true,
        "tags": [
            {
                "originalTitle": "noexpand",
                "title": "noexpand",
                "text": ""
            }
        ],
        "___id": "T000002R000434",
        "description": "<p>Immutable.js OrderedMap</p>",
        "comment": "/**\n * Immutable.js OrderedMap\n * @typedef OrderedMap\n * @noexpand\n * @see https://facebook.github.io/immutable-js/docs/#/OrderedMap\n */"
    },
    {
        "meta": {
            "range": [
                1025,
                1149
            ],
            "filename": "JsdocTypes.js",
            "lineno": 66,
            "path": "/Users/allanhortle/localhost/code/enty/src/decls",
            "code": {}
        },
        "longname": "Record",
        "name": "Record",
        "see": [
            "https://facebook.github.io/immutable-js/docs/#/Record"
        ],
        "scope": "global",
        "kind": "typedef",
        "___s": true,
        "tags": [
            {
                "originalTitle": "noexpand",
                "title": "noexpand",
                "text": ""
            }
        ],
        "___id": "T000002R000435",
        "description": "<p>Immutable.js Record</p>",
        "comment": "/**\n * Immutable.js Record\n * @typedef Record\n * @noexpand\n * @see https://facebook.github.io/immutable-js/docs/#/Record\n */"
    },
    {
        "meta": {
            "range": [
                1151,
                1284
            ],
            "filename": "JsdocTypes.js",
            "lineno": 73,
            "path": "/Users/allanhortle/localhost/code/enty/src/decls",
            "code": {}
        },
        "longname": "ReactComponent",
        "name": "ReactComponent",
        "see": [
            "https://facebook.github.io/react/docs/react-component.html"
        ],
        "scope": "global",
        "kind": "typedef",
        "___s": true,
        "tags": [
            {
                "originalTitle": "noexpand",
                "title": "noexpand",
                "text": ""
            }
        ],
        "___id": "T000002R000436",
        "description": "<p>React Component</p>",
        "comment": "/**\n * React Component\n * @typedef ReactComponent\n * @noexpand\n * @see https://facebook.github.io/react/docs/react-component.html\n */"
    },
    {
        "meta": {
            "range": [
                1286,
                1415
            ],
            "filename": "JsdocTypes.js",
            "lineno": 80,
            "path": "/Users/allanhortle/localhost/code/enty/src/decls",
            "code": {}
        },
        "longname": "ReactElement",
        "name": "ReactElement",
        "see": [
            "https://facebook.github.io/react/docs/react-component.html"
        ],
        "scope": "global",
        "kind": "typedef",
        "___s": true,
        "tags": [
            {
                "originalTitle": "noexpand",
                "title": "noexpand",
                "text": ""
            }
        ],
        "___id": "T000002R000437",
        "description": "<p>React Element</p>",
        "comment": "/**\n * React Element\n * @typedef ReactElement\n * @noexpand\n * @see https://facebook.github.io/react/docs/react-component.html\n */"
    },
    {
        "comment": "/**\n * @module Misc\n */",
        "meta": {
            "range": [
                389,
                412
            ],
            "filename": "logRequestActionNames.js",
            "lineno": 17,
            "path": "/Users/allanhortle/localhost/code/enty/src/utils",
            "code": {}
        },
        "kind": "module",
        "name": "Misc",
        "longname": "module:Misc",
        "___id": "T000002R000548",
        "___s": true
    },
    {
        "meta": {
            "range": [
                608,
                762
            ],
            "filename": "logRequestActionNames.js",
            "lineno": 27,
            "path": "/Users/allanhortle/localhost/code/enty/src/utils",
            "code": {
                "id": "astnode100006905",
                "name": "logRequestActionNames",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "actionMap"
                ]
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "<p>map of actions</p>",
                "name": "actionMap"
            }
        ],
        "longname": "module:Misc.logRequestActionNames",
        "name": "logRequestActionNames",
        "memberof": "module:Misc",
        "scope": "static",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000556",
        "description": "<p>Given the return value of creatRequestActionSet it will log the names of the created action types and creators</p>",
        "comment": "/**\n * Given the return value of creatRequestActionSet it will log the names of the created action types and creators\n * @param {Object} actionMap map of actions\n *\n * @memberof module:Misc\n */"
    },
    {
        "kind": "package",
        "longname": "package:undefined",
        "files": [
            "/Users/allanhortle/localhost/code/enty/src/CreateEntityQuery.js",
            "/Users/allanhortle/localhost/code/enty/src/CreateEntityReducer.js",
            "/Users/allanhortle/localhost/code/enty/src/CreateRequestActions.js",
            "/Users/allanhortle/localhost/code/enty/src/CreateSchema.js",
            "/Users/allanhortle/localhost/code/enty/src/DeleteEntityAction.js",
            "/Users/allanhortle/localhost/code/enty/src/EntitySelector.js",
            "/Users/allanhortle/localhost/code/enty/src/LocalStateHock.jsx",
            "/Users/allanhortle/localhost/code/enty/src/Logger.js",
            "/Users/allanhortle/localhost/code/enty/src/PropChangeHock.jsx",
            "/Users/allanhortle/localhost/code/enty/src/ReceiveEntityAction.js",
            "/Users/allanhortle/localhost/code/enty/src/RequestStateSelector.js",
            "/Users/allanhortle/localhost/code/enty/src/__tests__/CreateEntityQuery-test.js",
            "/Users/allanhortle/localhost/code/enty/src/__tests__/CreateEntityReducer-test.js",
            "/Users/allanhortle/localhost/code/enty/src/__tests__/CreateRequestActions-test.js",
            "/Users/allanhortle/localhost/code/enty/src/__tests__/EntitySelector-test.js",
            "/Users/allanhortle/localhost/code/enty/src/__tests__/Logger-env-1-test.js",
            "/Users/allanhortle/localhost/code/enty/src/__tests__/Logger-env-2-test.js",
            "/Users/allanhortle/localhost/code/enty/src/__tests__/Logger-env-3-test.js",
            "/Users/allanhortle/localhost/code/enty/src/__tests__/Logger-test.js",
            "/Users/allanhortle/localhost/code/enty/src/__tests__/RequestStateSelector-test.js",
            "/Users/allanhortle/localhost/code/enty/src/connectWithQuery.jsx",
            "/Users/allanhortle/localhost/code/enty/src/decls/JsdocTypes.js",
            "/Users/allanhortle/localhost/code/enty/src/index.js",
            "/Users/allanhortle/localhost/code/enty/src/utils/DistinctMemo.js",
            "/Users/allanhortle/localhost/code/enty/src/utils/MergeEntities.js",
            "/Users/allanhortle/localhost/code/enty/src/utils/__tests__/safeFilterIterable-test.js",
            "/Users/allanhortle/localhost/code/enty/src/utils/logRequestActionNames.js",
            "/Users/allanhortle/localhost/code/enty/src/utils/safeFilterIterable.js"
        ],
        "___id": "T000002R000561",
        "___s": true
    }
]