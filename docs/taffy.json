[
    {
        "comment": "/**\n * @module Api\n */",
        "meta": {
            "range": [
                992,
                1014
            ],
            "filename": "EntityApi.js",
            "lineno": 35,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {}
        },
        "kind": "module",
        "name": "Api",
        "longname": "module:Api",
        "___id": "T000002R000018",
        "___s": true
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "<p>An Entity Api</p>"
            }
        ],
        "meta": {
            "range": [
                3190,
                4975
            ],
            "filename": "EntityApi.js",
            "lineno": 95,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {
                "id": "astnode100000301",
                "name": "EntityApi",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "schema",
                    "actionMap",
                    "selectOptions"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "<p>deep object representation of api functions</p>",
                "name": "schema"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "<p>deep object representation of api functions</p>",
                "name": "actionMap"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "<p>deep object representation of api functions</p>",
                "name": "selectOptions"
            }
        ],
        "longname": "module:Api.EntityApi",
        "name": "EntityApi",
        "memberof": "module:Api",
        "scope": "static",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000030",
        "description": "<p>Constructs the Entity Api for use around the site</p>",
        "comment": "/**\n * Constructs the Entity Api for use around the site\n *\n * @param  {object} schema          deep object representation of api functions\n * @param  {object} actionMap       deep object representation of api functions\n * @param  {object} selectOptions   deep object representation of api functions\n * @return {object}                 An Entity Api\n * @memberof module:Api\n */"
    },
    {
        "comment": "/**\n * @module Misc\n */",
        "meta": {
            "range": [
                859,
                882
            ],
            "filename": "EntityMutationHockFactory.js",
            "lineno": 35,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {}
        },
        "kind": "module",
        "name": "Misc",
        "longname": "module:Misc",
        "___id": "T000002R000040",
        "___s": true
    },
    {
        "meta": {
            "range": [
                1012,
                3516
            ],
            "filename": "EntityMutationHockFactory.js",
            "lineno": 46,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {
                "id": "astnode100000663",
                "name": "EntityMutationHockFactory",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "actionCreator",
                    "selectOptions"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [],
        "longname": "module:Misc.EntityMutationHockFactory",
        "name": "EntityMutationHockFactory",
        "memberof": "module:Misc",
        "scope": "static",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000057",
        "description": "<p>Entitiy Mutation Hock</p>\n<p>param {function} sideEffect\nreturns {EntityQueryHockFactory}</p>",
        "comment": "/**\n * Entitiy Mutation Hock\n *\n * param {function} sideEffect\n * returns {EntityQueryHockFactory}\n * @memberof module:Misc\n */"
    },
    {
        "comment": "/**\n * @module Misc\n */",
        "meta": {
            "range": [
                1099,
                1122
            ],
            "filename": "EntityQueryHockFactory.js",
            "lineno": 43,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {}
        },
        "kind": "module",
        "name": "Misc",
        "longname": "module:Misc",
        "___id": "T000002R000083",
        "___s": true
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "EntityQueryHockFactory"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                2146,
                3757
            ],
            "filename": "EntityQueryHockFactory.js",
            "lineno": 64,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {
                "id": "astnode100001081",
                "name": "EntityQueryHockFactory",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "actionCreator",
                    "selectOptions"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "sideEffect"
            }
        ],
        "longname": "module:Misc.EntityQueryHockFactory",
        "name": "EntityQueryHockFactory",
        "memberof": "module:Misc",
        "scope": "static",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000104",
        "description": "<p>EntityQueries are the main way to request and receive entity state. For most components you will\nhave a query that should be fired on componentWillMount (also if certain props change) and you\nwould like the result of that query to be given to the component once it resolves.\n<code>createEntityQuery</code> wraps all this together in a factory that returns an\nEntityQueryHock. This lets you create different EntityQueryHocks for different side effects.\n<em>Note: A graphql based application often only needs one.</em></p>\n<p>Each EntityQueryHock will listen for a change in props and trigger the <code>queryCreator</code>\nfunction with the current props. The result of this will be given to the side effect.\nThe resulting data will be normalized and a reference will be stored under a auto-generated resultKey.\nThis result of this is selected along with it's <code>RequestState</code> and given to the decorated component as props.</p>",
        "comment": "/**\n * EntityQueries are the main way to request and receive entity state. For most components you will\n * have a query that should be fired on componentWillMount (also if certain props change) and you\n * would like the result of that query to be given to the component once it resolves.\n * `createEntityQuery` wraps all this together in a factory that returns an\n * EntityQueryHock. This lets you create different EntityQueryHocks for different side effects.\n * _Note: A graphql based application often only needs one._\n *\n * Each EntityQueryHock will listen for a change in props and trigger the `queryCreator`\n * function with the current props. The result of this will be given to the side effect.\n * The resulting data will be normalized and a reference will be stored under a auto-generated resultKey.\n * This result of this is selected along with it's `RequestState` and given to the decorated component as props.\n *\n * @param {function} sideEffect\n * @returns {EntityQueryHockFactory}\n * @memberof module:Misc\n */"
    },
    {
        "comment": "/**\n * @module Misc\n */",
        "meta": {
            "range": [
                506,
                529
            ],
            "filename": "EntityReducerFactory.js",
            "lineno": 23,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {}
        },
        "kind": "module",
        "name": "Misc",
        "longname": "module:Misc",
        "___id": "T000002R000120",
        "___s": true
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1581,
                4943
            ],
            "filename": "EntityReducerFactory.js",
            "lineno": 51,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {
                "id": "astnode100001338",
                "name": "EntityReducerFactory",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "config"
                ]
            },
            "vars": {
                "undefined": null,
                "initialState": "module:Misc.EntityReducerFactory~initialState",
                "defaultMeta": "module:Misc.EntityReducerFactory~defaultMeta",
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "<p>Map of schema action names.</p>",
                "name": "schemaMap"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "<p>config.afterNormalize function to edit payload data after it is normalized.</p>",
                "name": "config.afterNormalize"
            }
        ],
        "longname": "module:Misc.EntityReducerFactory",
        "examples": [
            "import {createEntityReducer} from 'enty';\nimport EntitySchema from 'myapp/EntitySchema';\n\nexport default combineReducers({\n    entity: createEntityReducer({\n         schemaMap: {\n             GRAPHQL_RECEIVE: EntitySchema,\n             MY_CUSTOM_ACTION_RECEIVE: EntitySchema.myCustomActionSchema\n         },\n         afterNormalize: (value, key) => value,\n    })\n});"
        ],
        "name": "EntityReducerFactory",
        "memberof": "module:Misc",
        "scope": "static",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000131",
        "description": "<p>Returns a reducer that normalizes data based on the [normalizr] schemas provided. When an action is fired, if the type matches one provied in <code>schemaMap</code> the payload is normalized based off the given schema.\nTakes a map of schemas where each key is an action name and value is a schema. must have at least one key called <code>mainSchema</code> returns a reducer that holds the main entity state.</p>",
        "comment": "/**\n * Returns a reducer that normalizes data based on the [normalizr] schemas provided. When an action is fired, if the type matches one provied in `schemaMap` the payload is normalized based off the given schema.\n * Takes a map of schemas where each key is an action name and value is a schema. must have at least one key called `mainSchema` returns a reducer that holds the main entity state.\n *\n * @example\n * import {createEntityReducer} from 'enty';\n * import EntitySchema from 'myapp/EntitySchema';\n *\n * export default combineReducers({\n *     entity: createEntityReducer({\n *          schemaMap: {\n *              GRAPHQL_RECEIVE: EntitySchema,\n *              MY_CUSTOM_ACTION_RECEIVE: EntitySchema.myCustomActionSchema\n *          },\n *          afterNormalize: (value, key) => value,\n *     })\n * });\n *\n * @param {object} schemaMap - Map of schema action names.\n * @param {function} config.afterNormalize - config.afterNormalize function to edit payload data after it is normalized.\n * @return {function}\n * @memberof module:Misc\n *\n */"
    },
    {
        "comment": "/**\n * @module Selectors\n */",
        "meta": {
            "range": [
                770,
                798
            ],
            "filename": "EntitySelector.js",
            "lineno": 30,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {}
        },
        "kind": "module",
        "name": "Selectors",
        "longname": "module:Selectors",
        "___id": "T000002R000153",
        "___s": true
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "<p>entity map</p>"
            }
        ],
        "meta": {
            "range": [
                1085,
                1585
            ],
            "filename": "EntitySelector.js",
            "lineno": 42,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {
                "id": "astnode100001822",
                "name": "selectEntityByResult",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "state",
                    "resultKey",
                    "options"
                ]
            },
            "vars": {
                "undefined": null,
                "entities": "module:Selectors.selectEntityByResult~entities",
                "schema": "module:Selectors.selectEntityByResult~schema",
                "data": "module:Selectors.selectEntityByResult~data"
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "state"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "resultKey"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "ENTITY_RECEIVE",
                "name": "schemaKey"
            }
        ],
        "longname": "module:Selectors.selectEntityByResult",
        "name": "selectEntityByResult",
        "memberof": "module:Selectors",
        "scope": "static",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000168",
        "description": "<p>The primary means of accessing entity state. Given a requestKey it will return the denormalized state object.</p>",
        "comment": "/**\n * The primary means of accessing entity state. Given a requestKey it will return the denormalized state object.\n * @param  {object} state\n * @param  {string} resultKey\n * @param  {string} [schemaKey=ENTITY_RECEIVE]\n * @return {object} entity map\n * @memberof module:Selectors\n */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "<p>entity map</p>"
            }
        ],
        "meta": {
            "range": [
                2003,
                2366
            ],
            "filename": "EntitySelector.js",
            "lineno": 69,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {
                "id": "astnode100001905",
                "name": "selectEntityById",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "state",
                    "type",
                    "id",
                    "options"
                ]
            },
            "vars": {
                "undefined": null,
                "entities": "module:Selectors.selectEntityById~entities",
                "schema": "module:Selectors.selectEntityById~schema"
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "state"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "ENTITY_RECEIVE",
                "name": "schemaKey"
            }
        ],
        "longname": "module:Selectors.selectEntityById",
        "name": "selectEntityById",
        "memberof": "module:Selectors",
        "scope": "static",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000176",
        "description": "<p>Given a type and id of and entity in state it will return the denormalized state.\nThis function is only used when you are certain you need the exact id in entity state.\nMost often the request key is more appropriate.</p>",
        "comment": "/**\n * Given a type and id of and entity in state it will return the denormalized state.\n * This function is only used when you are certain you need the exact id in entity state.\n * Most often the request key is more appropriate.\n * @param  {object} state\n * @param  {string} type\n * @param  {string} id\n * @param  {string} [schemaKey=ENTITY_RECEIVE]\n * @return {object} entity map\n * @memberof module:Selectors\n */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Immutable.List"
                    ]
                },
                "description": "<p>entity list</p>"
            }
        ],
        "meta": {
            "range": [
                2584,
                3074
            ],
            "filename": "EntitySelector.js",
            "lineno": 89,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {
                "id": "astnode100001965",
                "name": "selectEntityByType",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "state",
                    "type",
                    "options"
                ]
            },
            "vars": {
                "undefined": null,
                "entities": "module:Selectors.selectEntityByType~entities",
                "schema": "module:Selectors.selectEntityByType~schema",
                "data": "module:Selectors.selectEntityByType~data"
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "state"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "ENTITY_RECEIVE",
                "name": "schemaKey"
            }
        ],
        "longname": "module:Selectors.selectEntityByType",
        "name": "selectEntityByType",
        "memberof": "module:Selectors",
        "scope": "static",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000183",
        "description": "<p>Access a whole entity type as a list</p>",
        "comment": "/**\n * Access a whole entity type as a list\n * @param  {object} state\n * @param  {string} type\n * @param  {string} [schemaKey=ENTITY_RECEIVE]\n * @return {Immutable.List} entity list\n * @memberof module:Selectors\n */"
    },
    {
        "comment": "/**\n * @module Selectors\n */",
        "meta": {
            "range": [
                427,
                455
            ],
            "filename": "RequestStateSelector.js",
            "lineno": 21,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {}
        },
        "kind": "module",
        "name": "Selectors",
        "longname": "module:Selectors",
        "___id": "T000002R000235",
        "___s": true
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "<p>the curerent request state</p>"
            }
        ],
        "meta": {
            "range": [
                774,
                1014
            ],
            "filename": "RequestStateSelector.js",
            "lineno": 32,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {
                "id": "astnode100002466",
                "name": "selectRequestState",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "state",
                    "requestStateKey",
                    "options"
                ]
            },
            "vars": {
                "undefined": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "<p>the current state</p>",
                "name": "state"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<p>either result key or action prefix</p>",
                "name": "requestStateKey"
            }
        ],
        "longname": "module:Selectors.selectRequestState",
        "name": "selectRequestState",
        "memberof": "module:Selectors",
        "scope": "static",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000245",
        "description": "<p>Returns the state of a current request. Either fetching, error or not yet requested.</p>",
        "comment": "/**\n * Returns the state of a current request. Either fetching, error or not yet requested.\n * @param  {object} state            the current state\n * @param  {string} requestStateKey  either result key or action prefix\n * @return {object}                  the curerent request state\n * @memberof module:Selectors\n */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "EntityQueryHockApplier"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                0,
                232
            ],
            "filename": "JsdocTypes.js",
            "lineno": 1,
            "path": "/Users/allanhortle/localhost/code/enty/src/decls",
            "code": {}
        },
        "params": [
            {
                "type": {
                    "names": [
                        "QueryCreator"
                    ]
                },
                "name": "queryCreator"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "optional": true,
                "description": "<p>Description</p>",
                "name": "propUpdateKeys"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "<p>Description</p>",
                "name": "metaOverride"
            }
        ],
        "longname": "EntityQueryHockFactory",
        "name": "EntityQueryHockFactory",
        "scope": "global",
        "kind": "typedef",
        "___s": true,
        "___id": "T000002R000541",
        "type": {
            "names": [
                "function"
            ]
        },
        "comment": "/**\n * @callback EntityQueryHockFactory\n *\n * @param {QueryCreator} queryCreator\n *\n * @param {string[]} [propUpdateKeys]\n * Description\n *\n * @param {Object} [metaOverride]\n * Description\n *\n * @returns {EntityQueryHockApplier}\n */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Component"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                234,
                343
            ],
            "filename": "JsdocTypes.js",
            "lineno": 15,
            "path": "/Users/allanhortle/localhost/code/enty/src/decls",
            "code": {}
        },
        "params": [
            {
                "type": {
                    "names": [
                        "Component"
                    ]
                },
                "name": "componentToDecorate"
            }
        ],
        "longname": "EntityQueryHockApplier",
        "name": "EntityQueryHockApplier",
        "scope": "global",
        "kind": "typedef",
        "___s": true,
        "___id": "T000002R000542",
        "type": {
            "names": [
                "function"
            ]
        },
        "comment": "/**\n* @callback EntityQueryHockApplier\n*\n* @param {Component} componentToDecorate\n*\n* @returns {Component}\n*/"
    },
    {
        "meta": {
            "range": [
                345,
                502
            ],
            "filename": "JsdocTypes.js",
            "lineno": 23,
            "path": "/Users/allanhortle/localhost/code/enty/src/decls",
            "code": {}
        },
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "<p>Description</p>",
                "name": "props"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "<p>Description</p>",
                "name": "state"
            }
        ],
        "longname": "QueryCreator",
        "name": "QueryCreator",
        "scope": "global",
        "kind": "typedef",
        "___s": true,
        "___id": "T000002R000543",
        "type": {
            "names": [
                "function"
            ]
        },
        "description": "<p>QueryCreator Description</p>",
        "comment": "/**\n * QueryCreator Description\n *\n * @callback QueryCreator\n *\n * @param {Object} [props]\n * Description\n *\n * @param {Object} [state]\n * Description\n *\n */"
    },
    {
        "meta": {
            "range": [
                518,
                648
            ],
            "filename": "JsdocTypes.js",
            "lineno": 38,
            "path": "/Users/allanhortle/localhost/code/enty/src/decls",
            "code": {}
        },
        "longname": "Iterable",
        "name": "Iterable",
        "see": [
            "https://facebook.github.io/immutable-js/docs/#/Iterable"
        ],
        "scope": "global",
        "kind": "typedef",
        "___s": true,
        "tags": [
            {
                "originalTitle": "noexpand",
                "title": "noexpand",
                "text": ""
            }
        ],
        "___id": "T000002R000544",
        "description": "<p>Immutable.js Iterable</p>",
        "comment": "/**\n * Immutable.js Iterable\n * @typedef Iterable\n * @noexpand\n * @see https://facebook.github.io/immutable-js/docs/#/Iterable\n */"
    },
    {
        "meta": {
            "range": [
                650,
                768
            ],
            "filename": "JsdocTypes.js",
            "lineno": 45,
            "path": "/Users/allanhortle/localhost/code/enty/src/decls",
            "code": {}
        },
        "longname": "List",
        "name": "List",
        "see": [
            "https://facebook.github.io/immutable-js/docs/#/List"
        ],
        "scope": "global",
        "kind": "typedef",
        "___s": true,
        "tags": [
            {
                "originalTitle": "noexpand",
                "title": "noexpand",
                "text": ""
            }
        ],
        "___id": "T000002R000545",
        "description": "<p>Immutable.js List</p>",
        "comment": "/**\n * Immutable.js List\n * @typedef List\n * @noexpand\n * @see https://facebook.github.io/immutable-js/docs/#/List\n */"
    },
    {
        "meta": {
            "range": [
                770,
                885
            ],
            "filename": "JsdocTypes.js",
            "lineno": 52,
            "path": "/Users/allanhortle/localhost/code/enty/src/decls",
            "code": {}
        },
        "longname": "Map",
        "name": "Map",
        "see": [
            "https://facebook.github.io/immutable-js/docs/#/Map"
        ],
        "scope": "global",
        "kind": "typedef",
        "___s": true,
        "tags": [
            {
                "originalTitle": "noexpand",
                "title": "noexpand",
                "text": ""
            }
        ],
        "___id": "T000002R000546",
        "description": "<p>Immutable.js Map</p>",
        "comment": "/**\n * Immutable.js Map\n * @typedef Map\n * @noexpand\n * @see https://facebook.github.io/immutable-js/docs/#/Map\n */"
    },
    {
        "meta": {
            "range": [
                887,
                1023
            ],
            "filename": "JsdocTypes.js",
            "lineno": 59,
            "path": "/Users/allanhortle/localhost/code/enty/src/decls",
            "code": {}
        },
        "longname": "OrderedMap",
        "name": "OrderedMap",
        "see": [
            "https://facebook.github.io/immutable-js/docs/#/OrderedMap"
        ],
        "scope": "global",
        "kind": "typedef",
        "___s": true,
        "tags": [
            {
                "originalTitle": "noexpand",
                "title": "noexpand",
                "text": ""
            }
        ],
        "___id": "T000002R000547",
        "description": "<p>Immutable.js OrderedMap</p>",
        "comment": "/**\n * Immutable.js OrderedMap\n * @typedef OrderedMap\n * @noexpand\n * @see https://facebook.github.io/immutable-js/docs/#/OrderedMap\n */"
    },
    {
        "meta": {
            "range": [
                1025,
                1149
            ],
            "filename": "JsdocTypes.js",
            "lineno": 66,
            "path": "/Users/allanhortle/localhost/code/enty/src/decls",
            "code": {}
        },
        "longname": "Record",
        "name": "Record",
        "see": [
            "https://facebook.github.io/immutable-js/docs/#/Record"
        ],
        "scope": "global",
        "kind": "typedef",
        "___s": true,
        "tags": [
            {
                "originalTitle": "noexpand",
                "title": "noexpand",
                "text": ""
            }
        ],
        "___id": "T000002R000548",
        "description": "<p>Immutable.js Record</p>",
        "comment": "/**\n * Immutable.js Record\n * @typedef Record\n * @noexpand\n * @see https://facebook.github.io/immutable-js/docs/#/Record\n */"
    },
    {
        "meta": {
            "range": [
                1151,
                1284
            ],
            "filename": "JsdocTypes.js",
            "lineno": 73,
            "path": "/Users/allanhortle/localhost/code/enty/src/decls",
            "code": {}
        },
        "longname": "ReactComponent",
        "name": "ReactComponent",
        "see": [
            "https://facebook.github.io/react/docs/react-component.html"
        ],
        "scope": "global",
        "kind": "typedef",
        "___s": true,
        "tags": [
            {
                "originalTitle": "noexpand",
                "title": "noexpand",
                "text": ""
            }
        ],
        "___id": "T000002R000549",
        "description": "<p>React Component</p>",
        "comment": "/**\n * React Component\n * @typedef ReactComponent\n * @noexpand\n * @see https://facebook.github.io/react/docs/react-component.html\n */"
    },
    {
        "meta": {
            "range": [
                1286,
                1415
            ],
            "filename": "JsdocTypes.js",
            "lineno": 80,
            "path": "/Users/allanhortle/localhost/code/enty/src/decls",
            "code": {}
        },
        "longname": "ReactElement",
        "name": "ReactElement",
        "see": [
            "https://facebook.github.io/react/docs/react-component.html"
        ],
        "scope": "global",
        "kind": "typedef",
        "___s": true,
        "tags": [
            {
                "originalTitle": "noexpand",
                "title": "noexpand",
                "text": ""
            }
        ],
        "___id": "T000002R000550",
        "description": "<p>React Element</p>",
        "comment": "/**\n * React Element\n * @typedef ReactElement\n * @noexpand\n * @see https://facebook.github.io/react/docs/react-component.html\n */"
    },
    {
        "kind": "package",
        "longname": "package:undefined",
        "files": [
            "/Users/allanhortle/localhost/code/enty/src/EntityApi.js",
            "/Users/allanhortle/localhost/code/enty/src/EntityMutationHockFactory.js",
            "/Users/allanhortle/localhost/code/enty/src/EntityQueryHockFactory.js",
            "/Users/allanhortle/localhost/code/enty/src/EntityReducerFactory.js",
            "/Users/allanhortle/localhost/code/enty/src/EntitySelector.js",
            "/Users/allanhortle/localhost/code/enty/src/EntityStoreFactory.jsx",
            "/Users/allanhortle/localhost/code/enty/src/Logger.js",
            "/Users/allanhortle/localhost/code/enty/src/RequestState.jsx",
            "/Users/allanhortle/localhost/code/enty/src/RequestStateSelector.js",
            "/Users/allanhortle/localhost/code/enty/src/__tests__/CreateRequestActions-test.js",
            "/Users/allanhortle/localhost/code/enty/src/__tests__/EntityMutationHockFactory-test.js",
            "/Users/allanhortle/localhost/code/enty/src/__tests__/EntityQueryHockFactory-test.js",
            "/Users/allanhortle/localhost/code/enty/src/__tests__/EntityReducerFactory-test.js",
            "/Users/allanhortle/localhost/code/enty/src/__tests__/EntitySelector-test.js",
            "/Users/allanhortle/localhost/code/enty/src/__tests__/Logger-env-1-test.js",
            "/Users/allanhortle/localhost/code/enty/src/__tests__/Logger-env-2-test.js",
            "/Users/allanhortle/localhost/code/enty/src/__tests__/Logger-env-3-test.js",
            "/Users/allanhortle/localhost/code/enty/src/__tests__/Logger-test.js",
            "/Users/allanhortle/localhost/code/enty/src/__tests__/RequestStateSelector-test.js",
            "/Users/allanhortle/localhost/code/enty/src/decls/FlowTypes.js",
            "/Users/allanhortle/localhost/code/enty/src/decls/JsdocTypes.js",
            "/Users/allanhortle/localhost/code/enty/src/index.js",
            "/Users/allanhortle/localhost/code/enty/src/schema/ArraySchema.js",
            "/Users/allanhortle/localhost/code/enty/src/schema/EntitySchema.js",
            "/Users/allanhortle/localhost/code/enty/src/schema/ObjectSchema.js",
            "/Users/allanhortle/localhost/code/enty/src/schema/SchemaConstant.js",
            "/Users/allanhortle/localhost/code/enty/src/schema/__tests__/ArraySchema-test.js",
            "/Users/allanhortle/localhost/code/enty/src/schema/__tests__/EntitySchema-test.js",
            "/Users/allanhortle/localhost/code/enty/src/schema/__tests__/ObjectSchema-test.js",
            "/Users/allanhortle/localhost/code/enty/src/utils/Connect.js",
            "/Users/allanhortle/localhost/code/enty/src/utils/DistinctMemo.js",
            "/Users/allanhortle/localhost/code/enty/src/utils/__tests__/Connect-test.js",
            "/Users/allanhortle/localhost/code/enty/src/utils/__tests__/DistinctMemo-test.js"
        ],
        "___id": "T000002R001038",
        "___s": true
    }
]