[
    {
        "comment": "/**\nThe Entity Api is the main access point for your data. It allows you to define the link between your views\nand the services that they fetch their data from.\nIts main purpose it to:\n\n1. Construct a redux store from your schema.\n2. Create higher order components that connect data to your views.\n\n@module Api\n*/",
        "meta": {
            "range": [
                992,
                1305
            ],
            "filename": "EntityApi.js",
            "lineno": 35,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {}
        },
        "description": "<p>The Entity Api is the main access point for your data. It allows you to define the link between your views\nand the services that they fetch their data from.\nIts main purpose it to:</p>\n<ol>\n<li>Construct a redux store from your schema.</li>\n<li>Create higher order components that connect data to your views.</li>\n</ol>",
        "kind": "module",
        "name": "Api",
        "longname": "module:Api",
        "___id": "T000002R000018",
        "___s": true
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "EntityApi"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                4244,
                6004
            ],
            "filename": "EntityApi.js",
            "lineno": 127,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {
                "id": "astnode100000294",
                "name": "EntityApi",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "schema",
                    "actionMap",
                    "selectOptions"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "Schema"
                    ]
                },
                "description": "<p>A schema describing the relationships between your data</p>",
                "name": "schema"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "<p>deep object representation of api functions</p>",
                "name": "actionMap"
            },
            {
                "type": {
                    "names": [
                        "SelectOptions"
                    ]
                },
                "optional": true,
                "name": "selectOptions"
            }
        ],
        "longname": "module:Api.EntityApi",
        "examples": [
            "import {EntityApi} from 'enty';\nimport ApplicationSchema from './entity/ApplicationSchema';\n\nconst Api = EntityApi(ApplicationSchema, {\n    core: payload => post('/graphql', payload),\n    user: payload => post('/user', payload),\n    article: {\n        create: payload => post('/article', payload),\n        list: payload => get('/article', payload)\n    }\n});\n\nexport const {\n    EntityStore,\n\n    CoreQueryHock,\n    CoreMutationHock,\n    UserQueryHock,\n    UserMutationHock,\n    ArticleCreateQueryHock,\n    ArticleCreateMutationHock,\n    ArticleListQueryHock,\n    ArticleListMutationHock\n} = Api;"
        ],
        "name": "EntityApi",
        "memberof": "module:Api",
        "scope": "static",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000030",
        "description": "<p>Constructs an Entity Api based off a schema and an object of promise returning functions.</p>\n<p>EntityApi will construct QueryHocks and MutationHocks for each promise returning function,\nand a Redux store and reducer for your entity state.</p>",
        "comment": "/**\n * Constructs an Entity Api based off a schema and an object of promise returning functions.\n *\n * EntityApi will construct QueryHocks and MutationHocks for each promise returning function,\n * and a Redux store and reducer for your entity state.\n *\n *\n * @example\n * import {EntityApi} from 'enty';\n * import ApplicationSchema from './entity/ApplicationSchema';\n *\n * const Api = EntityApi(ApplicationSchema, {\n *     core: payload => post('/graphql', payload),\n *     user: payload => post('/user', payload),\n *     article: {\n *         create: payload => post('/article', payload),\n *         list: payload => get('/article', payload)\n *     }\n * });\n *\n * export const {\n *     EntityStore,\n *\n *     CoreQueryHock,\n *     CoreMutationHock,\n *     UserQueryHock,\n *     UserMutationHock,\n *     ArticleCreateQueryHock,\n *     ArticleCreateMutationHock,\n *     ArticleListQueryHock,\n *     ArticleListMutationHock\n * } = Api;\n *\n * @param  {Schema} schema          A schema describing the relationships between your data\n * @param  {object} actionMap       deep object representation of api functions\n * @param  {SelectOptions} [selectOptions]\n * @return {EntityApi}\n * @memberof module:Api\n */"
    },
    {
        "comment": "/**\n * woot\n * @module Factories\n */",
        "meta": {
            "range": [
                859,
                895
            ],
            "filename": "EntityMutationHockFactory.js",
            "lineno": 35,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {}
        },
        "description": "<p>woot</p>",
        "kind": "module",
        "name": "Factories",
        "longname": "module:Factories",
        "___id": "T000002R000041",
        "___s": true
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "MutationHock"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1069,
                5350
            ],
            "filename": "EntityMutationHockFactory.js",
            "lineno": 48,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {
                "id": "astnode100000651",
                "name": "EntityMutationHockFactory",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "actionCreator",
                    "selectOptions"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "actionCreator"
            },
            {
                "type": {
                    "names": [
                        "SelectOptions"
                    ]
                },
                "name": "selectOptions"
            }
        ],
        "longname": "module:Factories.EntityMutationHockFactory",
        "name": "EntityMutationHockFactory",
        "memberof": "module:Factories",
        "scope": "static",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000058",
        "description": "<p>EntityMutationHockFactory</p>",
        "comment": "/**\n * EntityMutationHockFactory\n *\n * @param {function} actionCreator\n * @param {SelectOptions} selectOptions\n * @returns {MutationHock}\n * @memberof module:Factories\n */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1141,
                2888
            ],
            "filename": "EntityMutationHockFactory.js",
            "lineno": 50,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {}
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "<p>turns</p>",
                "name": "payloadCreator"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "<p>description</p>",
                "name": "optionsOverride"
            }
        ],
        "longname": "module:Hocks.MutationHock",
        "examples": [
            "// UserDataHocks.js\nimport {UserMutationHock} from './EntityApi';\nimport DeleteUserQuery from './DeleteUserQuery.graphql';\n\nexport function DeleteUserMutationHock() {\n   return UserMutationHock(({id}) => {\n       return {\n           query: DeleteUserQuery,\n           variables: {\n               id\n           }\n       }\n   });\n}\n\n// User.jsx\nimport React from 'react';\nimport {DeleteUserMutationHock} from './UserDataHocks';\n\nfunction User(props) {\n    const {id, onMutate} = props;\n    return <Button onClick={() => onMutate(id)}>Delete User</Button>\n}\n\nconst withMutation = DeleteUserMutationHock();\n\nexport default withMutation(User);"
        ],
        "name": "MutationHock",
        "memberof": "module:Hocks",
        "scope": "static",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000084",
        "description": "<p>Mutation is used to request or change data in response to user interaction.\nWhen the <code>onMutate</code> functions is called the payload is passed through <code>payloadCreator</code> and\non to its corresponding promise in the EntityApi.\nThe result of this promise is sent to the entity reducer along with a hash of <code>payloadCreator</code> as a <code>resultKey</code>.\nThe data is normalized, stored in state and then returned to the component. At each stage of the [entity flow]\nAn appropriate <code>RequestState</code> is given to the component. This means the component can be sure that the query is\nfetching/re-fetching, has thrown an error, or has arrived safely.</p>",
        "comment": "/**\n     * Mutation is used to request or change data in response to user interaction.\n     * When the `onMutate` functions is called the payload is passed through `payloadCreator` and\n     * on to its corresponding promise in the EntityApi.\n     * The result of this promise is sent to the entity reducer along with a hash of `payloadCreator` as a `resultKey`.\n     * The data is normalized, stored in state and then returned to the component. At each stage of the [entity flow]\n     * An appropriate `RequestState` is given to the component. This means the component can be sure that the query is\n     * fetching/re-fetching, has thrown an error, or has arrived safely.\n     *\n     * @example\n     *\n     * // UserDataHocks.js\n     * import {UserMutationHock} from './EntityApi';\n     * import DeleteUserQuery from './DeleteUserQuery.graphql';\n     *\n     * export function DeleteUserMutationHock() {\n     *    return UserMutationHock(({id}) => {\n     *        return {\n     *            query: DeleteUserQuery,\n     *            variables: {\n     *                id\n     *            }\n     *        }\n     *    });\n     * }\n     *\n     * // User.jsx\n     * import React from 'react';\n     * import {DeleteUserMutationHock} from './UserDataHocks';\n     *\n     * function User(props) {\n     *     const {id, onMutate} = props;\n     *     return <Button onClick={() => onMutate(id)}>Delete User</Button>\n     * }\n     *\n     * const withMutation = DeleteUserMutationHock();\n     *\n     * export default withMutation(User);\n     *\n     * @name MutationHock\n     * @kind function\n     * @param {function} payloadCreator - turns\n     * @param {Object} [optionsOverride] - description\n     * @returns {function}\n     * @memberof module:Hocks\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "EntityQueryHock"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1202,
                3899
            ],
            "filename": "EntityQueryHockFactory.js",
            "lineno": 49,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {
                "id": "astnode100001069",
                "name": "EntityQueryHockFactory",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "actionCreator",
                    "selectOptions"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "sideEffect"
            }
        ],
        "longname": "module:Factories.EntityQueryHockFactory",
        "name": "EntityQueryHockFactory",
        "memberof": "module:Factories",
        "scope": "static",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000106",
        "comment": "/**\n *\n * @param {function} sideEffect\n * @returns {EntityQueryHock}\n * @memberof module:Factories\n */"
    },
    {
        "comment": "/**\n     * Hocks are the primary means of connecting data to your views.\n     *\n     * @module Hocks\n     */",
        "meta": {
            "range": [
                1270,
                1378
            ],
            "filename": "EntityQueryHockFactory.js",
            "lineno": 50,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {}
        },
        "description": "<p>Hocks are the primary means of connecting data to your views.</p>",
        "kind": "module",
        "name": "Hocks",
        "longname": "module:Hocks",
        "___id": "T000002R000107",
        "___s": true
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1384,
                2336
            ],
            "filename": "EntityQueryHockFactory.js",
            "lineno": 56,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {}
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "<p>turns</p>",
                "name": "queryCreator"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "<p>description</p>",
                "name": "updateKeys"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "<p>description</p>",
                "name": "optionsOverride"
            }
        ],
        "longname": "module:Hocks.QueryHock",
        "name": "QueryHock",
        "memberof": "module:Hocks",
        "scope": "static",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000108",
        "description": "<p>QueryHock is used to request data before a component renders.\nWhen one of the <code>updateKeys</code> on props changes the hock will pass the current props through\n<code>queryCreator</code> and on to its corresponding promise in EntityApi.\nThe result of this promise is sent to the entity reducer along with a hash of <code>queryCreator</code> as a <code>resultKey</code>.</p>\n<p>The data is normalized, stored in state and then returned to the component. At each stage of the [entity flow]\nAn appropriate <code>RequestState</code> is given to the component. This means the component can be sure that the query is\nfetching/re-fetching, has thrown an error, or has arrived safely.</p>",
        "comment": "/**\n     * QueryHock is used to request data before a component renders.\n     * When one of the `updateKeys` on props changes the hock will pass the current props through\n     * `queryCreator` and on to its corresponding promise in EntityApi.\n     * The result of this promise is sent to the entity reducer along with a hash of `queryCreator` as a `resultKey`.\n     *\n     * The data is normalized, stored in state and then returned to the component. At each stage of the [entity flow]\n     * An appropriate `RequestState` is given to the component. This means the component can be sure that the query is\n     * fetching/re-fetching, has thrown an error, or has arrived safely.\n     *\n     *\n     * @name QueryHock\n     * @kind function\n     * @param {function} queryCreator - turns\n     * @param {string[]} updateKeys - description\n     * @param {Object} [optionsOverride] - description\n     * @returns {function}\n     * @memberof module:Hocks\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1004,
                4366
            ],
            "filename": "EntityReducerFactory.js",
            "lineno": 43,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {
                "id": "astnode100001326",
                "name": "EntityReducerFactory",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "config"
                ]
            },
            "vars": {
                "undefined": null,
                "initialState": "module:Factories.EntityReducerFactory~initialState",
                "defaultMeta": "module:Factories.EntityReducerFactory~defaultMeta",
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "<p>Map of schema action names.</p>",
                "name": "config.schemaMap"
            }
        ],
        "longname": "module:Factories.EntityReducerFactory",
        "examples": [
            "import {createEntityReducer} from 'enty';\nimport EntitySchema from 'myapp/EntitySchema';\n\nexport default combineReducers({\n    entity: EntityReducerFactory({\n         schemaMap: {\n             GRAPHQL_RECEIVE: EntitySchema,\n             MY_CUSTOM_ACTION_RECEIVE: EntitySchema.myCustomActionSchema\n         }\n    })\n});"
        ],
        "name": "EntityReducerFactory",
        "memberof": "module:Factories",
        "scope": "static",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000134",
        "comment": "/**\n *\n * @example\n * import {createEntityReducer} from 'enty';\n * import EntitySchema from 'myapp/EntitySchema';\n *\n * export default combineReducers({\n *     entity: EntityReducerFactory({\n *          schemaMap: {\n *              GRAPHQL_RECEIVE: EntitySchema,\n *              MY_CUSTOM_ACTION_RECEIVE: EntitySchema.myCustomActionSchema\n *          }\n *     })\n * });\n *\n * @param {object} config.schemaMap - Map of schema action names.\n * @return {function}\n * @memberof module:Factories\n *\n */"
    },
    {
        "comment": "/**\n * @module Selectors\n */",
        "meta": {
            "range": [
                745,
                773
            ],
            "filename": "EntitySelector.js",
            "lineno": 30,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {}
        },
        "kind": "module",
        "name": "Selectors",
        "longname": "module:Selectors",
        "___id": "T000002R000156",
        "___s": true
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "<p>entity map</p>"
            }
        ],
        "meta": {
            "range": [
                1154,
                1700
            ],
            "filename": "EntitySelector.js",
            "lineno": 45,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {
                "id": "astnode100001816",
                "name": "selectEntityByResult",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "state",
                    "resultKey",
                    "options"
                ]
            },
            "vars": {
                "undefined": null,
                "entities": "module:Selectors.selectEntityByResult~entities",
                "schema": "module:Selectors.selectEntityByResult~schema",
                "data": "module:Selectors.selectEntityByResult~data"
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "state"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "resultKey"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "ENTITY_RECEIVE",
                "name": "schemaKey"
            }
        ],
        "longname": "module:Selectors.selectEntityByResult",
        "name": "selectEntityByResult",
        "memberof": "module:Selectors",
        "scope": "static",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000172",
        "description": "<p>The primary means of accessing entity state. Given a requestKey it will return the denormalized state object.</p>",
        "comment": "/**\n * The primary means of accessing entity state. Given a requestKey it will return the denormalized state object.\n * @param  {object} state\n * @param  {string} resultKey\n * @param  {string} [schemaKey=ENTITY_RECEIVE]\n * @return {object} entity map\n * @memberof module:Selectors\n */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "<p>entity map</p>"
            }
        ],
        "meta": {
            "range": [
                2118,
                2503
            ],
            "filename": "EntitySelector.js",
            "lineno": 72,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {
                "id": "astnode100001905",
                "name": "selectEntityById",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "state",
                    "type",
                    "id",
                    "options"
                ]
            },
            "vars": {
                "undefined": null,
                "entities": "module:Selectors.selectEntityById~entities",
                "schema": "module:Selectors.selectEntityById~schema"
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "state"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "ENTITY_RECEIVE",
                "name": "schemaKey"
            }
        ],
        "longname": "module:Selectors.selectEntityById",
        "name": "selectEntityById",
        "memberof": "module:Selectors",
        "scope": "static",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000180",
        "description": "<p>Given a type and id of and entity in state it will return the denormalized state.\nThis function is only used when you are certain you need the exact id in entity state.\nMost often the request key is more appropriate.</p>",
        "comment": "/**\n * Given a type and id of and entity in state it will return the denormalized state.\n * This function is only used when you are certain you need the exact id in entity state.\n * Most often the request key is more appropriate.\n * @param  {object} state\n * @param  {string} type\n * @param  {string} id\n * @param  {string} [schemaKey=ENTITY_RECEIVE]\n * @return {object} entity map\n * @memberof module:Selectors\n */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Immutable.List"
                    ]
                },
                "description": "<p>entity list</p>"
            }
        ],
        "meta": {
            "range": [
                2721,
                3256
            ],
            "filename": "EntitySelector.js",
            "lineno": 92,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {
                "id": "astnode100001968",
                "name": "selectEntityByType",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "state",
                    "type",
                    "options"
                ]
            },
            "vars": {
                "undefined": null,
                "entities": "module:Selectors.selectEntityByType~entities",
                "schema": "module:Selectors.selectEntityByType~schema",
                "data": "module:Selectors.selectEntityByType~data"
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "state"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "ENTITY_RECEIVE",
                "name": "schemaKey"
            }
        ],
        "longname": "module:Selectors.selectEntityByType",
        "name": "selectEntityByType",
        "memberof": "module:Selectors",
        "scope": "static",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000187",
        "description": "<p>Access a whole entity type as a list</p>",
        "comment": "/**\n * Access a whole entity type as a list\n * @param  {object} state\n * @param  {string} type\n * @param  {string} [schemaKey=ENTITY_RECEIVE]\n * @return {Immutable.List} entity list\n * @memberof module:Selectors\n */"
    },
    {
        "comment": "/**\n * Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quo ratione earum molestias aliquam impedit, optio et aspernatur ipsum cum eveniet laboriosam eius sunt, vero culpa rem sequi pariatur quia corporis.\n * @module RequestState\n */",
        "meta": {
            "range": [
                51,
                293
            ],
            "filename": "RequestState.jsx",
            "lineno": 5,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {}
        },
        "description": "<p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quo ratione earum molestias aliquam impedit, optio et aspernatur ipsum cum eveniet laboriosam eius sunt, vero culpa rem sequi pariatur quia corporis.</p>",
        "kind": "module",
        "name": "RequestState",
        "longname": "module:RequestState",
        "___id": "T000002R000237",
        "___s": true
    },
    {
        "meta": {
            "range": [
                295,
                369
            ],
            "filename": "RequestState.jsx",
            "lineno": 10,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {}
        },
        "longname": "module:RequestState.EmptyState",
        "name": "EmptyState",
        "memberof": "module:RequestState",
        "scope": "static",
        "kind": "member",
        "___s": true,
        "___id": "T000002R000238",
        "description": "<p>EmptyState</p>",
        "comment": "/**\n * EmptyState\n * @name EmptyState\n * @memberof module:RequestState\n */"
    },
    {
        "meta": {
            "range": [
                371,
                451
            ],
            "filename": "RequestState.jsx",
            "lineno": 16,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {}
        },
        "longname": "module:RequestState.FetchingState",
        "name": "FetchingState",
        "memberof": "module:RequestState",
        "scope": "static",
        "kind": "member",
        "___s": true,
        "___id": "T000002R000239",
        "description": "<p>FetchingState</p>",
        "comment": "/**\n * FetchingState\n * @name FetchingState\n * @memberof module:RequestState\n */"
    },
    {
        "meta": {
            "range": [
                453,
                537
            ],
            "filename": "RequestState.jsx",
            "lineno": 22,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {}
        },
        "longname": "module:RequestState.RefetchingState",
        "name": "RefetchingState",
        "memberof": "module:RequestState",
        "scope": "static",
        "kind": "member",
        "___s": true,
        "___id": "T000002R000240",
        "description": "<p>RefetchingState</p>",
        "comment": "/**\n * RefetchingState\n * @name RefetchingState\n * @memberof module:RequestState\n */"
    },
    {
        "meta": {
            "range": [
                539,
                613
            ],
            "filename": "RequestState.jsx",
            "lineno": 28,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {}
        },
        "longname": "module:RequestState.ErrorState",
        "name": "ErrorState",
        "memberof": "module:RequestState",
        "scope": "static",
        "kind": "member",
        "___s": true,
        "___id": "T000002R000241",
        "description": "<p>ErrorState</p>",
        "comment": "/**\n * ErrorState\n * @name ErrorState\n * @memberof module:RequestState\n */"
    },
    {
        "meta": {
            "range": [
                615,
                693
            ],
            "filename": "RequestState.jsx",
            "lineno": 34,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {}
        },
        "longname": "module:RequestState.SuccessState",
        "name": "SuccessState",
        "memberof": "module:RequestState",
        "scope": "static",
        "kind": "member",
        "___s": true,
        "___id": "T000002R000243",
        "description": "<p>SuccessState</p>",
        "comment": "/**\n * SuccessState\n * @name SuccessState\n * @memberof module:RequestState\n */"
    },
    {
        "comment": "/**\n * @module Selectors\n */",
        "meta": {
            "range": [
                427,
                455
            ],
            "filename": "RequestStateSelector.js",
            "lineno": 21,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {}
        },
        "kind": "module",
        "name": "Selectors",
        "longname": "module:Selectors",
        "___id": "T000002R000245",
        "___s": true
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "<p>the curerent request state</p>"
            }
        ],
        "meta": {
            "range": [
                775,
                1015
            ],
            "filename": "RequestStateSelector.js",
            "lineno": 33,
            "path": "/Users/allanhortle/localhost/code/enty/src",
            "code": {
                "id": "astnode100002475",
                "name": "selectRequestState",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "state",
                    "requestStateKey",
                    "options"
                ]
            },
            "vars": {
                "undefined": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "<p>the current state</p>",
                "name": "state"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<p>either result key or action prefix</p>",
                "name": "requestStateKey"
            }
        ],
        "longname": "module:Selectors.selectRequestState",
        "name": "selectRequestState",
        "memberof": "module:Selectors",
        "scope": "static",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000255",
        "description": "<p>Returns the state of a current request. Either fetching, error or not yet requested.</p>",
        "comment": "/**\n * Returns the state of a current request. Either fetching, error or not yet requested.\n * @param  {object} state            the current state\n * @param  {string} requestStateKey  either result key or action prefix\n * @return {object}                  the curerent request state\n * @memberof module:Selectors\n */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "EntityQueryHockApplier"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                38,
                270
            ],
            "filename": "JsdocTypes.js",
            "lineno": 4,
            "path": "/Users/allanhortle/localhost/code/enty/src/decls",
            "code": {}
        },
        "params": [
            {
                "type": {
                    "names": [
                        "QueryCreator"
                    ]
                },
                "name": "queryCreator"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "optional": true,
                "description": "<p>Description</p>",
                "name": "propUpdateKeys"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "optional": true,
                "description": "<p>Description</p>",
                "name": "metaOverride"
            }
        ],
        "longname": "EntityQueryHockFactory",
        "name": "EntityQueryHockFactory",
        "scope": "global",
        "kind": "typedef",
        "___s": true,
        "___id": "T000002R000551",
        "type": {
            "names": [
                "function"
            ]
        },
        "comment": "/**\n * @callback EntityQueryHockFactory\n *\n * @param {QueryCreator} queryCreator\n *\n * @param {string[]} [propUpdateKeys]\n * Description\n *\n * @param {object} [metaOverride]\n * Description\n *\n * @returns {EntityQueryHockApplier}\n */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Component"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                272,
                381
            ],
            "filename": "JsdocTypes.js",
            "lineno": 18,
            "path": "/Users/allanhortle/localhost/code/enty/src/decls",
            "code": {}
        },
        "params": [
            {
                "type": {
                    "names": [
                        "Component"
                    ]
                },
                "name": "componentToDecorate"
            }
        ],
        "longname": "EntityQueryHockApplier",
        "name": "EntityQueryHockApplier",
        "scope": "global",
        "kind": "typedef",
        "___s": true,
        "___id": "T000002R000552",
        "type": {
            "names": [
                "function"
            ]
        },
        "comment": "/**\n* @callback EntityQueryHockApplier\n*\n* @param {Component} componentToDecorate\n*\n* @returns {Component}\n*/"
    },
    {
        "meta": {
            "range": [
                383,
                540
            ],
            "filename": "JsdocTypes.js",
            "lineno": 26,
            "path": "/Users/allanhortle/localhost/code/enty/src/decls",
            "code": {}
        },
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "optional": true,
                "description": "<p>Description</p>",
                "name": "props"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "optional": true,
                "description": "<p>Description</p>",
                "name": "state"
            }
        ],
        "longname": "QueryCreator",
        "name": "QueryCreator",
        "scope": "global",
        "kind": "typedef",
        "___s": true,
        "___id": "T000002R000553",
        "type": {
            "names": [
                "function"
            ]
        },
        "description": "<p>QueryCreator Description</p>",
        "comment": "/**\n * QueryCreator Description\n *\n * @callback QueryCreator\n *\n * @param {object} [props]\n * Description\n *\n * @param {object} [state]\n * Description\n *\n */"
    },
    {
        "meta": {
            "range": [
                542,
                814
            ],
            "filename": "JsdocTypes.js",
            "lineno": 39,
            "path": "/Users/allanhortle/localhost/code/enty/src/decls",
            "code": {}
        },
        "longname": "SelectOptions",
        "name": "SelectOptions",
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "ENTITY_RECEIVE",
                "name": "schemaKey"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "entity",
                "description": "<p>redux key to store entity state at.</p>",
                "name": "stateKey"
            }
        ],
        "scope": "global",
        "kind": "typedef",
        "___s": true,
        "___id": "T000002R000554",
        "type": {
            "names": [
                "object"
            ]
        },
        "description": "<p>Configuration options passed to selectors for accessing state. (Basic uses cases wont need this)</p>",
        "comment": "/**\n * Configuration options passed to selectors for accessing state. (Basic uses cases wont need this)\n *\n * @typedef {object} SelectOptions\n * @property {string} [schemaKey=ENTITY_RECEIVE]\n * @property {string} [stateKey=entity] - redux key to store entity state at.\n */"
    },
    {
        "meta": {
            "range": [
                816,
                1253
            ],
            "filename": "JsdocTypes.js",
            "lineno": 47,
            "path": "/Users/allanhortle/localhost/code/enty/src/decls",
            "code": {}
        },
        "longname": "EntityApi",
        "name": "EntityApi",
        "properties": [
            {
                "type": {
                    "names": [
                        "ReduxStore"
                    ]
                },
                "name": "EntityStore"
            },
            {
                "type": {
                    "names": [
                        "ReduxReducer"
                    ]
                },
                "name": "EntityReducer"
            },
            {
                "type": {
                    "names": [
                        "QueryHock"
                    ]
                },
                "name": "<Key>QueryHock"
            },
            {
                "type": {
                    "names": [
                        "MutationHock"
                    ]
                },
                "name": "<Key>MutationHock"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "<p>Action Creator</p>",
                "name": "<key>"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "<key>.actionTypes.<KEY>_FETCH"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "<key>.actionTypes.<KEY>_RECEIVE"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "<key>.actionTypes.<KEY>_ERROR"
            }
        ],
        "scope": "global",
        "kind": "typedef",
        "___s": true,
        "___id": "T000002R000555",
        "type": {
            "names": [
                "object"
            ]
        },
        "description": "<p>Entity Api object shape</p>",
        "comment": "/**\n * Entity Api object shape\n *\n * @typedef {object} EntityApi\n * @property {ReduxStore} EntityStore\n * @property {ReduxReducer} EntityReducer\n * @property {QueryHock} <Key>QueryHock\n * @property {MutationHock} <Key>MutationHock\n * @property {function} <key> Action Creator\n * @property {string} <key>.actionTypes.<KEY>_FETCH\n * @property {string} <key>.actionTypes.<KEY>_RECEIVE\n * @property {string} <key>.actionTypes.<KEY>_ERROR\n */"
    },
    {
        "meta": {
            "range": [
                1269,
                1399
            ],
            "filename": "JsdocTypes.js",
            "lineno": 63,
            "path": "/Users/allanhortle/localhost/code/enty/src/decls",
            "code": {}
        },
        "longname": "Iterable",
        "name": "Iterable",
        "see": [
            "https://facebook.github.io/immutable-js/docs/#/Iterable"
        ],
        "scope": "global",
        "kind": "typedef",
        "___s": true,
        "tags": [
            {
                "originalTitle": "noexpand",
                "title": "noexpand",
                "text": ""
            }
        ],
        "___id": "T000002R000556",
        "description": "<p>Immutable.js Iterable</p>",
        "comment": "/**\n * Immutable.js Iterable\n * @typedef Iterable\n * @noexpand\n * @see https://facebook.github.io/immutable-js/docs/#/Iterable\n */"
    },
    {
        "meta": {
            "range": [
                1401,
                1519
            ],
            "filename": "JsdocTypes.js",
            "lineno": 70,
            "path": "/Users/allanhortle/localhost/code/enty/src/decls",
            "code": {}
        },
        "longname": "List",
        "name": "List",
        "see": [
            "https://facebook.github.io/immutable-js/docs/#/List"
        ],
        "scope": "global",
        "kind": "typedef",
        "___s": true,
        "tags": [
            {
                "originalTitle": "noexpand",
                "title": "noexpand",
                "text": ""
            }
        ],
        "___id": "T000002R000557",
        "description": "<p>Immutable.js List</p>",
        "comment": "/**\n * Immutable.js List\n * @typedef List\n * @noexpand\n * @see https://facebook.github.io/immutable-js/docs/#/List\n */"
    },
    {
        "meta": {
            "range": [
                1521,
                1636
            ],
            "filename": "JsdocTypes.js",
            "lineno": 77,
            "path": "/Users/allanhortle/localhost/code/enty/src/decls",
            "code": {}
        },
        "longname": "Map",
        "name": "Map",
        "see": [
            "https://facebook.github.io/immutable-js/docs/#/Map"
        ],
        "scope": "global",
        "kind": "typedef",
        "___s": true,
        "tags": [
            {
                "originalTitle": "noexpand",
                "title": "noexpand",
                "text": ""
            }
        ],
        "___id": "T000002R000558",
        "description": "<p>Immutable.js Map</p>",
        "comment": "/**\n * Immutable.js Map\n * @typedef Map\n * @noexpand\n * @see https://facebook.github.io/immutable-js/docs/#/Map\n */"
    },
    {
        "meta": {
            "range": [
                1638,
                1774
            ],
            "filename": "JsdocTypes.js",
            "lineno": 84,
            "path": "/Users/allanhortle/localhost/code/enty/src/decls",
            "code": {}
        },
        "longname": "OrderedMap",
        "name": "OrderedMap",
        "see": [
            "https://facebook.github.io/immutable-js/docs/#/OrderedMap"
        ],
        "scope": "global",
        "kind": "typedef",
        "___s": true,
        "tags": [
            {
                "originalTitle": "noexpand",
                "title": "noexpand",
                "text": ""
            }
        ],
        "___id": "T000002R000559",
        "description": "<p>Immutable.js OrderedMap</p>",
        "comment": "/**\n * Immutable.js OrderedMap\n * @typedef OrderedMap\n * @noexpand\n * @see https://facebook.github.io/immutable-js/docs/#/OrderedMap\n */"
    },
    {
        "meta": {
            "range": [
                1776,
                1900
            ],
            "filename": "JsdocTypes.js",
            "lineno": 91,
            "path": "/Users/allanhortle/localhost/code/enty/src/decls",
            "code": {}
        },
        "longname": "Record",
        "name": "Record",
        "see": [
            "https://facebook.github.io/immutable-js/docs/#/Record"
        ],
        "scope": "global",
        "kind": "typedef",
        "___s": true,
        "tags": [
            {
                "originalTitle": "noexpand",
                "title": "noexpand",
                "text": ""
            }
        ],
        "___id": "T000002R000560",
        "description": "<p>Immutable.js Record</p>",
        "comment": "/**\n * Immutable.js Record\n * @typedef Record\n * @noexpand\n * @see https://facebook.github.io/immutable-js/docs/#/Record\n */"
    },
    {
        "meta": {
            "range": [
                1902,
                2035
            ],
            "filename": "JsdocTypes.js",
            "lineno": 98,
            "path": "/Users/allanhortle/localhost/code/enty/src/decls",
            "code": {}
        },
        "longname": "ReactComponent",
        "name": "ReactComponent",
        "see": [
            "https://facebook.github.io/react/docs/react-component.html"
        ],
        "scope": "global",
        "kind": "typedef",
        "___s": true,
        "tags": [
            {
                "originalTitle": "noexpand",
                "title": "noexpand",
                "text": ""
            }
        ],
        "___id": "T000002R000561",
        "description": "<p>React Component</p>",
        "comment": "/**\n * React Component\n * @typedef ReactComponent\n * @noexpand\n * @see https://facebook.github.io/react/docs/react-component.html\n */"
    },
    {
        "meta": {
            "range": [
                2037,
                2166
            ],
            "filename": "JsdocTypes.js",
            "lineno": 105,
            "path": "/Users/allanhortle/localhost/code/enty/src/decls",
            "code": {}
        },
        "longname": "ReactElement",
        "name": "ReactElement",
        "see": [
            "https://facebook.github.io/react/docs/react-component.html"
        ],
        "scope": "global",
        "kind": "typedef",
        "___s": true,
        "tags": [
            {
                "originalTitle": "noexpand",
                "title": "noexpand",
                "text": ""
            }
        ],
        "___id": "T000002R000562",
        "description": "<p>React Element</p>",
        "comment": "/**\n * React Element\n * @typedef ReactElement\n * @noexpand\n * @see https://facebook.github.io/react/docs/react-component.html\n */"
    },
    {
        "comment": "/**\n * @module Schema\n */",
        "meta": {
            "range": [
                455,
                480
            ],
            "filename": "ArraySchema.js",
            "lineno": 20,
            "path": "/Users/allanhortle/localhost/code/enty/src/schema",
            "code": {}
        },
        "kind": "module",
        "name": "Schema",
        "longname": "module:Schema",
        "___id": "T000002R000614",
        "___s": true
    },
    {
        "meta": {
            "range": [
                535,
                1915
            ],
            "filename": "ArraySchema.js",
            "lineno": 29,
            "path": "/Users/allanhortle/localhost/code/enty/src/schema",
            "code": {
                "id": "astnode100007423",
                "name": "ArraySchema",
                "type": "ClassDeclaration",
                "paramnames": [
                    "definition",
                    "options"
                ]
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "Schema"
                    ]
                },
                "name": "definition"
            }
        ],
        "longname": "module:Schema.ArraySchema",
        "classdesc": "<p>ArraySchema</p>",
        "name": "ArraySchema",
        "memberof": "module:Schema",
        "scope": "static",
        "kind": "class",
        "___s": true,
        "___id": "T000002R000624",
        "comment": "/**\n * ArraySchema\n *\n * @memberof module:Schema\n */"
    },
    {
        "meta": {
            "range": [
                833,
                1394
            ],
            "filename": "ArraySchema.js",
            "lineno": 43,
            "path": "/Users/allanhortle/localhost/code/enty/src/schema",
            "code": {
                "id": "astnode100007459",
                "name": "ArraySchema#normalize",
                "type": "MethodDefinition",
                "paramnames": [
                    "data",
                    "entities"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [],
        "longname": "module:Schema.ArraySchema#normalize",
        "name": "normalize",
        "memberof": "module:Schema.ArraySchema",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000629",
        "description": "<p>ArraySchema.normalize</p>",
        "comment": "/**\n     * ArraySchema.normalize\n     */"
    },
    {
        "meta": {
            "range": [
                1447,
                1913
            ],
            "filename": "ArraySchema.js",
            "lineno": 63,
            "path": "/Users/allanhortle/localhost/code/enty/src/schema",
            "code": {
                "id": "astnode100007534",
                "name": "ArraySchema#denormalize",
                "type": "MethodDefinition",
                "paramnames": [
                    "normalizeState",
                    "path"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [],
        "longname": "module:Schema.ArraySchema#denormalize",
        "name": "denormalize",
        "memberof": "module:Schema.ArraySchema",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000636",
        "description": "<p>ArraySchema.denormalize</p>",
        "comment": "/**\n     * ArraySchema.denormalize\n     */"
    },
    {
        "comment": "/**\n * @module Schema\n */",
        "meta": {
            "range": [
                367,
                392
            ],
            "filename": "DynamicSchema.js",
            "lineno": 16,
            "path": "/Users/allanhortle/localhost/code/enty/src/schema",
            "code": {}
        },
        "kind": "module",
        "name": "Schema",
        "longname": "module:Schema",
        "___id": "T000002R000644",
        "___s": true
    },
    {
        "meta": {
            "range": [
                449,
                1439
            ],
            "filename": "DynamicSchema.js",
            "lineno": 25,
            "path": "/Users/allanhortle/localhost/code/enty/src/schema",
            "code": {
                "id": "astnode100007660",
                "name": "DynamicSchema",
                "type": "ClassDeclaration",
                "paramnames": [
                    "definition",
                    "options"
                ]
            }
        },
        "params": [],
        "longname": "module:Schema.DynamicSchema",
        "classdesc": "<p>DynamicSchema</p>",
        "name": "DynamicSchema",
        "memberof": "module:Schema",
        "scope": "static",
        "kind": "class",
        "___s": true,
        "___id": "T000002R000652",
        "comment": "/**\n * DynamicSchema\n *\n * @memberof module:Schema\n */"
    },
    {
        "meta": {
            "range": [
                693,
                786
            ],
            "filename": "DynamicSchema.js",
            "lineno": 36,
            "path": "/Users/allanhortle/localhost/code/enty/src/schema",
            "code": {
                "id": "astnode100007692",
                "name": "DynamicSchema#define",
                "type": "MethodDefinition",
                "paramnames": [
                    "definition"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [],
        "longname": "module:Schema.DynamicSchema#define",
        "name": "define",
        "memberof": "module:Schema.DynamicSchema",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000657",
        "description": "<p>DynamicSchema.define</p>",
        "comment": "/**\n     * DynamicSchema.define\n     */"
    },
    {
        "meta": {
            "range": [
                839,
                1189
            ],
            "filename": "DynamicSchema.js",
            "lineno": 44,
            "path": "/Users/allanhortle/localhost/code/enty/src/schema",
            "code": {
                "id": "astnode100007707",
                "name": "DynamicSchema#normalize",
                "type": "MethodDefinition",
                "paramnames": [
                    "data",
                    "entities"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [],
        "longname": "module:Schema.DynamicSchema#normalize",
        "name": "normalize",
        "memberof": "module:Schema.DynamicSchema",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000659",
        "description": "<p>DynamicSchema.normalize</p>",
        "comment": "/**\n     * DynamicSchema.normalize\n     */"
    },
    {
        "meta": {
            "range": [
                1244,
                1437
            ],
            "filename": "DynamicSchema.js",
            "lineno": 59,
            "path": "/Users/allanhortle/localhost/code/enty/src/schema",
            "code": {
                "id": "astnode100007742",
                "name": "DynamicSchema#denormalize",
                "type": "MethodDefinition",
                "paramnames": [
                    "normalizeState",
                    "path"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [],
        "longname": "module:Schema.DynamicSchema#denormalize",
        "name": "denormalize",
        "memberof": "module:Schema.DynamicSchema",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000666",
        "description": "<p>DynamicSchema.denormalize</p>",
        "comment": "/**\n     * DynamicSchema.denormalize\n     */"
    },
    {
        "comment": "/**\n * @module Schema\n */",
        "meta": {
            "range": [
                634,
                659
            ],
            "filename": "EntitySchema.js",
            "lineno": 26,
            "path": "/Users/allanhortle/localhost/code/enty/src/schema",
            "code": {}
        },
        "kind": "module",
        "name": "Schema",
        "longname": "module:Schema",
        "___id": "T000002R000671",
        "___s": true
    },
    {
        "meta": {
            "range": [
                708,
                3186
            ],
            "filename": "EntitySchema.js",
            "lineno": 37,
            "path": "/Users/allanhortle/localhost/code/enty/src/schema",
            "code": {
                "id": "astnode100007865",
                "name": "EntitySchema",
                "type": "ClassDeclaration",
                "paramnames": [
                    "name",
                    "options"
                ]
            }
        },
        "params": [],
        "longname": "module:Schema.EntitySchema",
        "classdesc": "<p>EntitySchema</p>",
        "name": "EntitySchema",
        "memberof": "module:Schema",
        "scope": "static",
        "kind": "class",
        "___s": true,
        "___id": "T000002R000684",
        "comment": "/**\n\nEntitySchema\n\n@memberof module:Schema\n\n*/"
    },
    {
        "meta": {
            "range": [
                1256,
                1349
            ],
            "filename": "EntitySchema.js",
            "lineno": 53,
            "path": "/Users/allanhortle/localhost/code/enty/src/schema",
            "code": {
                "id": "astnode100007952",
                "name": "EntitySchema#define",
                "type": "MethodDefinition",
                "paramnames": [
                    "definition"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [],
        "longname": "module:Schema.EntitySchema#define",
        "name": "define",
        "memberof": "module:Schema.EntitySchema",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000694",
        "description": "<p>EntitySchema.define</p>",
        "comment": "/**\n     * EntitySchema.define\n     */"
    },
    {
        "meta": {
            "range": [
                1401,
                2606
            ],
            "filename": "EntitySchema.js",
            "lineno": 61,
            "path": "/Users/allanhortle/localhost/code/enty/src/schema",
            "code": {
                "id": "astnode100007967",
                "name": "EntitySchema#normalize",
                "type": "MethodDefinition",
                "paramnames": [
                    "data",
                    "entities"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [],
        "longname": "module:Schema.EntitySchema#normalize",
        "name": "normalize",
        "memberof": "module:Schema.EntitySchema",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000696",
        "description": "<p>EntitySchema.normalize</p>",
        "comment": "/**\n     * EntitySchema.normalize\n     */"
    },
    {
        "meta": {
            "range": [
                2660,
                3184
            ],
            "filename": "EntitySchema.js",
            "lineno": 102,
            "path": "/Users/allanhortle/localhost/code/enty/src/schema",
            "code": {
                "id": "astnode100008079",
                "name": "EntitySchema#denormalize",
                "type": "MethodDefinition",
                "paramnames": [
                    "normalizeState",
                    "path"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [],
        "longname": "module:Schema.EntitySchema#denormalize",
        "name": "denormalize",
        "memberof": "module:Schema.EntitySchema",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000713",
        "description": "<p>EntitySchema.denormalize</p>",
        "comment": "/**\n     * EntitySchema.denormalize\n     */"
    },
    {
        "comment": "/**\n * @module Schema\n */",
        "meta": {
            "range": [
                569,
                594
            ],
            "filename": "ObjectSchema.js",
            "lineno": 24,
            "path": "/Users/allanhortle/localhost/code/enty/src/schema",
            "code": {}
        },
        "kind": "module",
        "name": "Schema",
        "longname": "module:Schema",
        "___id": "T000002R000725",
        "___s": true
    },
    {
        "meta": {
            "range": [
                650,
                3708
            ],
            "filename": "ObjectSchema.js",
            "lineno": 33,
            "path": "/Users/allanhortle/localhost/code/enty/src/schema",
            "code": {
                "id": "astnode100008244",
                "name": "ObjectSchema",
                "type": "ClassDeclaration",
                "paramnames": [
                    "definition",
                    "options"
                ]
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "<p>an object describing any entity relationships that should be traversed.</p>",
                "name": "definition"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "name": "options"
            }
        ],
        "longname": "module:Schema.ObjectSchema",
        "classdesc": "<p>ObjectSchema</p>",
        "name": "ObjectSchema",
        "memberof": "module:Schema",
        "scope": "static",
        "kind": "class",
        "___s": true,
        "___id": "T000002R000737",
        "description": "<p>The ObjectSchema is a structural schema used to define relationships in objects.</p>",
        "comment": "/**\n * ObjectSchema\n *\n * @memberof module:Schema\n */"
    },
    {
        "meta": {
            "range": [
                1351,
                1802
            ],
            "filename": "ObjectSchema.js",
            "lineno": 59,
            "path": "/Users/allanhortle/localhost/code/enty/src/schema",
            "code": {
                "id": "astnode100008283",
                "name": "ObjectSchema#normalize",
                "type": "MethodDefinition",
                "paramnames": [
                    "data",
                    "entities"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [],
        "longname": "module:Schema.ObjectSchema#normalize",
        "name": "normalize",
        "memberof": "module:Schema.ObjectSchema",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000743",
        "description": "<p>ObjectSchema.normalize</p>",
        "comment": "/**\n     * ObjectSchema.normalize\n     */"
    },
    {
        "meta": {
            "range": [
                1856,
                3509
            ],
            "filename": "ObjectSchema.js",
            "lineno": 77,
            "path": "/Users/allanhortle/localhost/code/enty/src/schema",
            "code": {
                "id": "astnode100008361",
                "name": "ObjectSchema#denormalize",
                "type": "MethodDefinition",
                "paramnames": [
                    "normalizeState",
                    "path"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [],
        "longname": "module:Schema.ObjectSchema#denormalize",
        "name": "denormalize",
        "memberof": "module:Schema.ObjectSchema",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000749",
        "description": "<p>ObjectSchema.denormalize</p>",
        "comment": "/**\n     * ObjectSchema.denormalize\n     */"
    },
    {
        "comment": "/**\n * @module Schema\n */",
        "meta": {
            "range": [
                363,
                388
            ],
            "filename": "ValueSchema.js",
            "lineno": 16,
            "path": "/Users/allanhortle/localhost/code/enty/src/schema",
            "code": {}
        },
        "kind": "module",
        "name": "Schema",
        "longname": "module:Schema",
        "___id": "T000002R000768",
        "___s": true
    },
    {
        "meta": {
            "range": [
                443,
                1295
            ],
            "filename": "ValueSchema.js",
            "lineno": 25,
            "path": "/Users/allanhortle/localhost/code/enty/src/schema",
            "code": {
                "id": "astnode100008664",
                "name": "ValueSchema",
                "type": "ClassDeclaration",
                "paramnames": [
                    "definition",
                    "options"
                ]
            }
        },
        "params": [],
        "longname": "module:Schema.ValueSchema",
        "classdesc": "<p>ValueSchema</p>",
        "name": "ValueSchema",
        "memberof": "module:Schema",
        "scope": "static",
        "kind": "class",
        "___s": true,
        "___id": "T000002R000776",
        "comment": "/**\n * ValueSchema\n *\n * @memberof module:Schema\n */"
    },
    {
        "meta": {
            "range": [
                732,
                825
            ],
            "filename": "ValueSchema.js",
            "lineno": 37,
            "path": "/Users/allanhortle/localhost/code/enty/src/schema",
            "code": {
                "id": "astnode100008702",
                "name": "ValueSchema#define",
                "type": "MethodDefinition",
                "paramnames": [
                    "definition"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [],
        "longname": "module:Schema.ValueSchema#define",
        "name": "define",
        "memberof": "module:Schema.ValueSchema",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000783",
        "description": "<p>ValueSchema.define</p>",
        "comment": "/**\n     * ValueSchema.define\n     */"
    },
    {
        "meta": {
            "range": [
                876,
                1120
            ],
            "filename": "ValueSchema.js",
            "lineno": 45,
            "path": "/Users/allanhortle/localhost/code/enty/src/schema",
            "code": {
                "id": "astnode100008717",
                "name": "ValueSchema#normalize",
                "type": "MethodDefinition",
                "paramnames": [
                    "data",
                    "entities"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [],
        "longname": "module:Schema.ValueSchema#normalize",
        "name": "normalize",
        "memberof": "module:Schema.ValueSchema",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000785",
        "description": "<p>ValueSchema.normalize</p>",
        "comment": "/**\n     * ValueSchema.normalize\n     */"
    },
    {
        "meta": {
            "range": [
                1173,
                1293
            ],
            "filename": "ValueSchema.js",
            "lineno": 58,
            "path": "/Users/allanhortle/localhost/code/enty/src/schema",
            "code": {
                "id": "astnode100008754",
                "name": "ValueSchema#denormalize",
                "type": "MethodDefinition",
                "paramnames": [
                    "normalizeState",
                    "path"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [],
        "longname": "module:Schema.ValueSchema#denormalize",
        "name": "denormalize",
        "memberof": "module:Schema.ValueSchema",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000791",
        "description": "<p>ValueSchema.denormalize</p>",
        "comment": "/**\n     * ValueSchema.denormalize\n     */"
    },
    {
        "kind": "package",
        "longname": "package:undefined",
        "files": [
            "/Users/allanhortle/localhost/code/enty/src/EntityApi.js",
            "/Users/allanhortle/localhost/code/enty/src/EntityMutationHockFactory.js",
            "/Users/allanhortle/localhost/code/enty/src/EntityQueryHockFactory.js",
            "/Users/allanhortle/localhost/code/enty/src/EntityReducerFactory.js",
            "/Users/allanhortle/localhost/code/enty/src/EntitySelector.js",
            "/Users/allanhortle/localhost/code/enty/src/EntityStoreFactory.jsx",
            "/Users/allanhortle/localhost/code/enty/src/Logger.js",
            "/Users/allanhortle/localhost/code/enty/src/RequestState.jsx",
            "/Users/allanhortle/localhost/code/enty/src/RequestStateSelector.js",
            "/Users/allanhortle/localhost/code/enty/src/__tests__/CreateRequestActions-test.js",
            "/Users/allanhortle/localhost/code/enty/src/__tests__/EntityMutationHockFactory-test.js",
            "/Users/allanhortle/localhost/code/enty/src/__tests__/EntityQueryHockFactory-test.js",
            "/Users/allanhortle/localhost/code/enty/src/__tests__/EntityReducerFactory-test.js",
            "/Users/allanhortle/localhost/code/enty/src/__tests__/EntitySelector-test.js",
            "/Users/allanhortle/localhost/code/enty/src/__tests__/Logger-env-1-test.js",
            "/Users/allanhortle/localhost/code/enty/src/__tests__/Logger-env-2-test.js",
            "/Users/allanhortle/localhost/code/enty/src/__tests__/Logger-env-3-test.js",
            "/Users/allanhortle/localhost/code/enty/src/__tests__/Logger-test.js",
            "/Users/allanhortle/localhost/code/enty/src/__tests__/RequestStateSelector-test.js",
            "/Users/allanhortle/localhost/code/enty/src/decls/FlowTypes.js",
            "/Users/allanhortle/localhost/code/enty/src/decls/JsdocTypes.js",
            "/Users/allanhortle/localhost/code/enty/src/index.js",
            "/Users/allanhortle/localhost/code/enty/src/schema/ArraySchema.js",
            "/Users/allanhortle/localhost/code/enty/src/schema/DynamicSchema.js",
            "/Users/allanhortle/localhost/code/enty/src/schema/EntitySchema.js",
            "/Users/allanhortle/localhost/code/enty/src/schema/ObjectSchema.js",
            "/Users/allanhortle/localhost/code/enty/src/schema/SchemaConstant.js",
            "/Users/allanhortle/localhost/code/enty/src/schema/ValueSchema.js",
            "/Users/allanhortle/localhost/code/enty/src/schema/__tests__/ArraySchema-test.js",
            "/Users/allanhortle/localhost/code/enty/src/schema/__tests__/DynamicSchema-test.js",
            "/Users/allanhortle/localhost/code/enty/src/schema/__tests__/EntitySchema-test.js",
            "/Users/allanhortle/localhost/code/enty/src/schema/__tests__/ObjectSchema-test.js",
            "/Users/allanhortle/localhost/code/enty/src/schema/__tests__/ValueSchema-test.js",
            "/Users/allanhortle/localhost/code/enty/src/utils/Connect.js",
            "/Users/allanhortle/localhost/code/enty/src/utils/DistinctMemo.js",
            "/Users/allanhortle/localhost/code/enty/src/utils/__tests__/Connect-test.js",
            "/Users/allanhortle/localhost/code/enty/src/utils/__tests__/DistinctMemo-test.js"
        ],
        "___id": "T000002R001179",
        "___s": true
    }
]