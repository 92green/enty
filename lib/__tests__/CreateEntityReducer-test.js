'use strict';

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _CreateEntityReducer = require('../CreateEntityReducer');

var _normalizr = require('normalizr');

var _immutable = require('immutable');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//
// Schemas
//


var SubredditSchema = new _normalizr.Schema('subreddit', { idAttribute: 'fullnameId' });
var AuthorSchema = new _normalizr.Schema('author', { idAttribute: 'fullnameId' });
var TopListingSchema = new _normalizr.Schema('topListings', { idAttribute: 'fullnameId' });

TopListingSchema.define({
    author: AuthorSchema
});

SubredditSchema.define({
    topListings: (0, _normalizr.arrayOf)(TopListingSchema)
});

var EntitySchema = {
    subreddit: SubredditSchema
};

(0, _ava2.default)('CreateEntityReducer', function (tt) {

    var schemaMap = {
        mainSchema: EntitySchema,
        TEST_RECEIVE: EntitySchema
    };

    var EntityReducer = (0, _CreateEntityReducer.createEntityReducer)(schemaMap, function (key, value) {
        return value;
    });

    var exampleAction = {
        type: "myType"
    };

    tt.true((0, _immutable.is)(EntityReducer(undefined, exampleAction).get('_schema'), (0, _immutable.Map)(schemaMap)), 'Immutable version of schema is returned under _schema when reducer is called with no existing state');

    tt.true((0, _immutable.is)(EntityReducer(undefined, exampleAction).get('_result'), (0, _immutable.Map)()), '_result is empty  when reducer is called with no existing state');

    tt.true(EntityReducer(undefined, { type: 'TEST_FETCH' }).getIn(['_requestState', 'TEST_FETCH', 'fetch']), '_requestState.fetch is true when action type ends with _FETCH');

    tt.false(EntityReducer(undefined, exampleAction).getIn(['_requestState', 'myType', 'fetch']), '_requestState.fetch is false when action type does not end with _FETCH');

    tt.is(EntityReducer(undefined, { type: 'TEST_ERROR', payload: 'errorPayload' }).getIn(['_requestState', 'TEST_ERROR', 'error']), 'errorPayload', '_requestState.error equals payload when action type ends with _ERROR');

    tt.is(EntityReducer(undefined, exampleAction).getIn(['_requestState', 'myType', 'error']), null, '_requestState.error equals is null when action type does not end with _ERROR');

    var exampleState = (0, _immutable.fromJS)({
        thing: {
            abc: '123'
        }
    });

    tt.true((0, _immutable.is)(EntityReducer(exampleState, exampleAction).get('thing'), (0, _immutable.fromJS)({ abc: '123' })), 'data on state is unchanged when not receiving data');

    var exampleStateWithResults = (0, _immutable.fromJS)({
        thing: {
            abc: '123'
        },
        _result: {
            TEST_FETCH: ['xyz'],
            TEST_OTHER_FETCH: ['xyz']
        }
    });

    tt.true((0, _immutable.is)(EntityReducer(exampleStateWithResults, exampleAction).get('_result'), exampleStateWithResults.get('_result')), 'state._result is unchanged when not receiving data');

    tt.true((0, _immutable.is)(EntityReducer(exampleStateWithResults, { type: 'TEST_FETCH' }).get('_result'), exampleStateWithResults.get('_result').delete('TEST_FETCH')), 'state._result.TYPE is deleted when TYPE is fetched');

    var exampleActionNoResultReset = {
        type: 'TEST_FETCH',
        meta: {
            resultResetOnFetch: false
        }
    };

    tt.true((0, _immutable.is)(EntityReducer(exampleStateWithResults, exampleActionNoResultReset).get('_result'), exampleStateWithResults.get('_result')), 'state._result.TYPE is unchanged when a type is fetched AND meta.resultResetOnFetch is true');

    var examplePayload = {
        subreddit: {
            name: "MechanicalKeyboards",
            fullnameId: "MK",
            topListings: [{
                "fullnameId": "CT",
                "title": "Cool title"
            }, {
                "fullnameId": "NT",
                "title": "Nice title"
            }]
        }
    };

    var exampleReceiveAction = {
        type: 'TEST_RECEIVE',
        payload: examplePayload
    };

    tt.is(EntityReducer(exampleState, exampleReceiveAction).getIn(['_result', 'TEST_RECEIVE', 'subreddit']), 'MK', 'Normalized results are stored in state under _result.ACTIONNAME.KEY');

    tt.true((0, _immutable.is)(EntityReducer(exampleState, exampleReceiveAction).getIn(['subreddit', 'MK']).delete('topListings'), (0, _immutable.fromJS)(examplePayload.subreddit).delete('topListings')), 'Normalized entities are stored in state under ENTITYNAME.ID');

    tt.true((0, _immutable.is)(EntityReducer(exampleState, exampleReceiveAction).getIn(['topListings', 'NT']), (0, _immutable.fromJS)(examplePayload.subreddit.topListings[1])), 'Normalized nested entities are stored in state under ENTITYNAME.ID');

    var mergeExamplePayloadOne = {
        subreddit: {
            name: "MechanicalKeyboards",
            code: "123",
            fullnameId: "MK",
            topListings: [{
                "fullnameId": "CT",
                "title": "Cool title"
            }, {
                "fullnameId": "NT",
                "title": "Nice title"
            }]
        }
    };

    var mergeExampleReceiveActionOne = {
        type: 'TEST_RECEIVE',
        payload: mergeExamplePayloadOne
    };

    var mergeExamplePayloadTwo = {
        subreddit: {
            name: "MechanicalKeyboards!",
            fullnameId: "MK",
            topListings: [{
                "fullnameId": "NT",
                "title": "Nice title!"
            }, {
                "fullnameId": "GL",
                "title": "Good luck"
            }]
        }
    };

    var mergeExampleReceiveActionTwo = {
        type: 'TEST_RECEIVE',
        payload: mergeExamplePayloadTwo
    };

    var mergeStateOne = EntityReducer(exampleState, mergeExampleReceiveActionOne);
    var mergeStateTwo = EntityReducer(mergeStateOne, mergeExampleReceiveActionTwo);

    tt.true((0, _immutable.is)(mergeStateTwo.getIn(['subreddit', 'MK']).delete('topListings'), (0, _immutable.fromJS)(mergeExamplePayloadTwo.subreddit).delete('topListings')), 'Receiving updated info for an entity will replace entity data');

    tt.true((0, _immutable.is)(mergeStateTwo.getIn(['topListings', 'NT']), (0, _immutable.fromJS)(mergeExamplePayloadTwo.subreddit.topListings[0])), 'Receiving updated info for an entity will replace nested entity data');

    tt.true((0, _immutable.is)(mergeStateTwo.getIn(['topListings', 'CT']), (0, _immutable.fromJS)(mergeExamplePayloadOne.subreddit.topListings[0])), 'Once an entity is received, its entity data is retained even if subsequent received entities dont contain it');

    tt.true((0, _immutable.is)(mergeStateTwo.getIn(['topListings', 'GL']), (0, _immutable.fromJS)(mergeExamplePayloadTwo.subreddit.topListings[1])), 'Newly received nested entites are merged into their entity container');
});
//# sourceMappingURL=data:application/json;base64,