'use strict';

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _CreateEntityReducer = require('../CreateEntityReducer');

var _normalizr = require('normalizr');

var _immutable = require('immutable');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//
// Schemas
//


var SubredditSchema = new _normalizr.Schema('subreddit', { idAttribute: 'fullnameId' });
var AuthorSchema = new _normalizr.Schema('author', { idAttribute: 'fullnameId' });
var TopListingSchema = new _normalizr.Schema('topListings', { idAttribute: 'fullnameId' });

TopListingSchema.define({
    author: AuthorSchema
});

SubredditSchema.define({
    topListings: (0, _normalizr.arrayOf)(TopListingSchema)
});

var EntitySchema = {
    subreddit: SubredditSchema
};

(0, _ava2.default)('CreateEntityReducer', function (tt) {

    var schemaMap = {
        mainSchema: EntitySchema,
        TEST_RECEIVE: EntitySchema
    };

    var EntityReducer = (0, _CreateEntityReducer.createEntityReducer)(schemaMap, function (key, value) {
        return value;
    });

    var exampleAction = {
        type: "myType"
    };

    tt.true((0, _immutable.is)(EntityReducer(undefined, exampleAction).get('_schema'), (0, _immutable.Map)(schemaMap)), 'Immutable version of schema is returned under _schema when reducer is called with no existing state');

    tt.true((0, _immutable.is)(EntityReducer(undefined, exampleAction).get('_result'), (0, _immutable.Map)()), '_result is empty  when reducer is called with no existing state');

    tt.true(EntityReducer(undefined, { type: 'TEST_FETCH' }).getIn(['_requestState', 'TEST_FETCH', 'fetch']), '_requestState.fetch is true when action type ends with _FETCH');

    tt.false(EntityReducer(undefined, exampleAction).getIn(['_requestState', 'myType', 'fetch']), '_requestState.fetch is false when action type does not end with _FETCH');

    tt.is(EntityReducer(undefined, { type: 'TEST_ERROR', payload: 'errorPayload' }).getIn(['_requestState', 'TEST_ERROR', 'error']), 'errorPayload', '_requestState.error equals payload when action type ends with _ERROR');

    tt.is(EntityReducer(undefined, exampleAction).getIn(['_requestState', 'myType', 'error']), null, '_requestState.error equals is null when action type does not end with _ERROR');

    var exampleState = (0, _immutable.fromJS)({
        thing: {
            abc: '123'
        }
    });

    tt.true((0, _immutable.is)(EntityReducer(exampleState, exampleAction).get('thing'), (0, _immutable.fromJS)({ abc: '123' })), 'data on state is unchanged when not receiving data');

    var exampleStateWithResults = (0, _immutable.fromJS)({
        thing: {
            abc: '123'
        },
        _result: {
            TEST_FETCH: ['xyz'],
            TEST_OTHER_FETCH: ['xyz']
        }
    });

    tt.true((0, _immutable.is)(EntityReducer(exampleStateWithResults, exampleAction).get('_result'), exampleStateWithResults.get('_result')), 'state._result is unchanged when not receiving data');

    tt.true((0, _immutable.is)(EntityReducer(exampleStateWithResults, { type: 'TEST_FETCH' }).get('_result'), exampleStateWithResults.get('_result').delete('TEST_FETCH')), 'state._result.TYPE is deleted when TYPE is fetched');

    var exampleActionNoResultReset = {
        type: 'TEST_FETCH',
        meta: {
            resultResetOnFetch: false
        }
    };

    tt.true((0, _immutable.is)(EntityReducer(exampleStateWithResults, exampleActionNoResultReset).get('_result'), exampleStateWithResults.get('_result')), 'state._result.TYPE is unchanged when a type is fetched AND meta.resultResetOnFetch is true');

    var examplePayload = {
        subreddit: {
            name: "MechanicalKeyboards",
            fullnameId: "MK",
            topListings: [{
                "fullnameId": "CT",
                "title": "Cool title"
            }, {
                "fullnameId": "NT",
                "title": "Nice title"
            }]
        }
    };

    var exampleReceiveAction = {
        type: 'TEST_RECEIVE',
        payload: examplePayload
    };

    tt.is(EntityReducer(exampleState, exampleReceiveAction).getIn(['_result', 'TEST_RECEIVE', 'subreddit']), 'MK', 'Normalized results are stored in state under _result.ACTIONNAME.KEY');

    tt.true((0, _immutable.is)(EntityReducer(exampleState, exampleReceiveAction).getIn(['subreddit', 'MK']).delete('topListings'), (0, _immutable.fromJS)(examplePayload.subreddit).delete('topListings')), 'Normalized entities are stored in state under ENTITYNAME.ID');

    tt.true((0, _immutable.is)(EntityReducer(exampleState, exampleReceiveAction).getIn(['topListings', 'NT']), (0, _immutable.fromJS)(examplePayload.subreddit.topListings[1])), 'Normalized nested entities are stored in state under ENTITYNAME.ID');

    var mergeExamplePayloadOne = {
        subreddit: {
            name: "MechanicalKeyboards",
            code: "123",
            fullnameId: "MK",
            topListings: [{
                "fullnameId": "CT",
                "title": "Cool title"
            }, {
                "fullnameId": "NT",
                "title": "Nice title"
            }],
            tags: ["A", "B"]
        }
    };

    var mergeExampleReceiveActionOne = {
        type: 'TEST_RECEIVE',
        payload: mergeExamplePayloadOne
    };

    var mergeExamplePayloadTwo = {
        subreddit: {
            name: "MechanicalKeyboards!",
            fullnameId: "MK",
            topListings: [{
                "fullnameId": "NT",
                "title": "Nice title!"
            }, {
                "fullnameId": "GL",
                "title": "Good luck"
            }],
            tags: ["C", "D"]
        }
    };

    var mergeExampleReceiveActionTwo = {
        type: 'TEST_RECEIVE',
        payload: mergeExamplePayloadTwo
    };

    var mergeStateOne = EntityReducer(exampleState, mergeExampleReceiveActionOne);
    var mergeStateTwo = EntityReducer(mergeStateOne, mergeExampleReceiveActionTwo);

    tt.is(mergeStateTwo.getIn(['subreddit', 'MK', 'name']), mergeExamplePayloadTwo.subreddit.name, 'Receiving updated values on the top level of an entity item will replace existing values');

    tt.true((0, _immutable.is)(mergeStateTwo.getIn(['subreddit', 'MK', 'tags']), (0, _immutable.fromJS)(mergeExamplePayloadTwo.subreddit.tags)), 'Receiving updated non-entity values on the second level of an entity are not merged, they are replaced');

    tt.is(mergeStateTwo.getIn(['subreddit', 'MK', 'code']), mergeExamplePayloadOne.subreddit.code, 'Existing top level keys and values on an entity item will remain when subsequent received data does not contain those top level keys');

    tt.true((0, _immutable.is)(mergeStateTwo.getIn(['topListings', 'NT']), (0, _immutable.fromJS)(mergeExamplePayloadTwo.subreddit.topListings[0])), 'Receiving updated info for an entity will replace nested entities');

    tt.true((0, _immutable.is)(mergeStateTwo.getIn(['topListings', 'CT']), (0, _immutable.fromJS)(mergeExamplePayloadOne.subreddit.topListings[0])), 'Once an entity is received, its entity data is retained even if subsequent received entities dont contain it');

    tt.true((0, _immutable.is)(mergeStateTwo.getIn(['topListings', 'GL']), (0, _immutable.fromJS)(mergeExamplePayloadTwo.subreddit.topListings[1])), 'Newly received nested entites are merged into their entity container');
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fX3Rlc3RzX18vQ3JlYXRlRW50aXR5UmVkdWNlci10ZXN0LmpzIl0sIm5hbWVzIjpbIlN1YnJlZGRpdFNjaGVtYSIsImlkQXR0cmlidXRlIiwiQXV0aG9yU2NoZW1hIiwiVG9wTGlzdGluZ1NjaGVtYSIsImRlZmluZSIsImF1dGhvciIsInRvcExpc3RpbmdzIiwiRW50aXR5U2NoZW1hIiwic3VicmVkZGl0Iiwic2NoZW1hTWFwIiwibWFpblNjaGVtYSIsIlRFU1RfUkVDRUlWRSIsIkVudGl0eVJlZHVjZXIiLCJrZXkiLCJ2YWx1ZSIsImV4YW1wbGVBY3Rpb24iLCJ0eXBlIiwidHQiLCJ0cnVlIiwidW5kZWZpbmVkIiwiZ2V0IiwiZ2V0SW4iLCJmYWxzZSIsImlzIiwicGF5bG9hZCIsImV4YW1wbGVTdGF0ZSIsInRoaW5nIiwiYWJjIiwiZXhhbXBsZVN0YXRlV2l0aFJlc3VsdHMiLCJfcmVzdWx0IiwiVEVTVF9GRVRDSCIsIlRFU1RfT1RIRVJfRkVUQ0giLCJkZWxldGUiLCJleGFtcGxlQWN0aW9uTm9SZXN1bHRSZXNldCIsIm1ldGEiLCJyZXN1bHRSZXNldE9uRmV0Y2giLCJleGFtcGxlUGF5bG9hZCIsIm5hbWUiLCJmdWxsbmFtZUlkIiwiZXhhbXBsZVJlY2VpdmVBY3Rpb24iLCJtZXJnZUV4YW1wbGVQYXlsb2FkT25lIiwiY29kZSIsInRhZ3MiLCJtZXJnZUV4YW1wbGVSZWNlaXZlQWN0aW9uT25lIiwibWVyZ2VFeGFtcGxlUGF5bG9hZFR3byIsIm1lcmdlRXhhbXBsZVJlY2VpdmVBY3Rpb25Ud28iLCJtZXJnZVN0YXRlT25lIiwibWVyZ2VTdGF0ZVR3byJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7OztBQUNBOztBQUNBOztBQUNBOzs7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQSxJQUFJQSxrQkFBa0Isc0JBQVcsV0FBWCxFQUF3QixFQUFDQyxhQUFhLFlBQWQsRUFBeEIsQ0FBdEI7QUFDQSxJQUFJQyxlQUFlLHNCQUFXLFFBQVgsRUFBcUIs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QURKLEVBS0ksc0VBTEo7QUFRSCxDQXBRRCIsImZpbGUiOiJDcmVhdGVFbnRpdHlSZWR1Y2VyLXRlc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdGVzdCBmcm9tICdhdmEnO1xuaW1wb3J0IHtjcmVhdGVFbnRpdHlSZWR1Y2VyfSBmcm9tICcuLi9DcmVhdGVFbnRpdHlSZWR1Y2VyJztcbmltcG9ydCB7U2NoZW1hLCBhcnJheU9mfSBmcm9tICdub3JtYWxpenInO1xuaW1wb3J0IHtpcywgZnJvbUpTLCBNYXB9IGZyb20gJ2ltbXV0YWJsZSc7XG5cbi8vXG4vLyBTY2hlbWFzXG4vL1xuXG5cbnZhciBTdWJyZWRkaXRTY2hlbWEgPSBuZXcgU2NoZW1hKCdzdWJyZWRkaXQnLCB7aWRBdHRyaWJ1dGU6ICdmdWxsbmFtZUlkJ30pO1xudmFyIEF1dGhvclNjaGVtYSA9IG5ldyBTY2hlbWEoJ2F1dGhvcicsIHtpZEF0dHJpYnV0ZTogJ2Z1bGxuYW1lSWQnfSk7XG52YXIgVG9wTGlzdGluZ1NjaGVtYSA9IG5ldyBTY2hlbWEoJ3RvcExpc3RpbmdzJywge2lkQXR0cmlidXRlOiAnZnVsbG5hbWVJZCd9KTtcblxuVG9wTGlzdGluZ1NjaGVtYS5kZWZpbmUoe1xuICAgIGF1dGhvcjogQXV0aG9yU2NoZW1hXG59KTtcblxuU3VicmVkZGl0U2NoZW1hLmRlZmluZSh7XG4gICAgdG9wTGlzdGluZ3M6IGFycmF5T2YoVG9wTGlzdGluZ1NjaGVtYSlcbn0pO1xuXG5jb25zdCBFbnRpdHlTY2hlbWEgPSB7XG4gICAgc3VicmVkZGl0OiBTdWJyZWRkaXRTY2hlbWFcbn1cblxudGVzdCgnQ3JlYXRlRW50aXR5UmVkdWNlcicsIHR0ID0+IHtcblxuICAgIGNvbnN0IHNjaGVtYU1hcCA9IHtcbiAgICAgICAgbWFpblNjaGVtYTogRW50aXR5U2NoZW1hLFxuICAgICAgICBURVNUX1JFQ0VJVkU6IEVudGl0eVNjaGVtYVxuICAgIH07XG5cbiAgICBjb25zdCBFbnRpdHlSZWR1Y2VyID0gY3JlYXRlRW50aXR5UmVkdWNlcihzY2hlbWFNYXAsIChrZXksIHZhbHVlKSA9PiB2YWx1ZSk7XG5cbiAgICBjb25zdCBleGFtcGxlQWN0aW9uID0ge1xuICAgICAgICB0eXBlOiBcIm15VHlwZVwiXG4gICAgfTtcblxuICAgIHR0LnRydWUoXG4gICAgICAgIGlzKFxuICAgICAgICAgICAgRW50aXR5UmVkdWNlcih1bmRlZmluZWQsIGV4YW1wbGVBY3Rpb24pLmdldCgnX3NjaGVtYScpLFxuICAgICAgICAgICAgTWFwKHNjaGVtYU1hcClcbiAgICAgICAgKSxcbiAgICAgICAgJ0ltbXV0YWJsZSB2ZXJzaW9uIG9mIHNjaGVtYSBpcyByZXR1cm5lZCB1bmRlciBfc2NoZW1hIHdoZW4gcmVkdWNlciBpcyBjYWxsZWQgd2l0aCBubyBleGlzdGluZyBzdGF0ZSdcbiAgICApO1xuXG4gICAgdHQudHJ1ZShcbiAgICAgICAgaXMoXG4gICAgICAgICAgICBFbnRpdHlSZWR1Y2VyKHVuZGVmaW5lZCwgZXhhbXBsZUFjdGlvbikuZ2V0KCdfcmVzdWx0JyksXG4gICAgICAgICAgICBNYXAoKVxuICAgICAgICApLFxuICAgICAgICAnX3Jlc3VsdCBpcyBlbXB0eSAgd2hlbiByZWR1Y2VyIGlzIGNhbGxlZCB3aXRoIG5vIGV4aXN0aW5nIHN0YXRlJ1xuICAgICk7XG5cbiAgICB0dC50cnVlKFxuICAgICAgICBFbnRpdHlSZWR1Y2VyKHVuZGVmaW5lZCwge3R5cGU6ICdURVNUX0ZFVENIJ30pXG4gICAgICAgICAgICAuZ2V0SW4oWydfcmVxdWVzdFN0YXRlJywgJ1RFU1RfRkVUQ0gnLCAnZmV0Y2gnXSksXG4gICAgICAgICdfcmVxdWVzdFN0YXRlLmZldGNoIGlzIHRydWUgd2hlbiBhY3Rpb24gdHlwZSBlbmRzIHdpdGggX0ZFVENIJ1xuICAgICk7XG5cbiAgICB0dC5mYWxzZShcbiAgICAgICAgRW50aXR5UmVkdWNlcih1bmRlZmluZWQsIGV4YW1wbGVBY3Rpb24pXG4gICAgICAgICAgICAuZ2V0SW4oWydfcmVxdWVzdFN0YXRlJywgJ215VHlwZScsICdmZXRjaCddKSxcbiAgICAgICAgJ19yZXF1ZXN0U3RhdGUuZmV0Y2ggaXMgZmFsc2Ugd2hlbiBhY3Rpb24gdHlwZSBkb2VzIG5vdCBlbmQgd2l0aCBfRkVUQ0gnXG4gICAgKTtcblxuICAgIHR0LmlzKFxuICAgICAgICBFbnRpdHlSZWR1Y2VyKHVuZGVmaW5lZCwge3R5cGU6ICdURVNUX0VSUk9SJywgcGF5bG9hZDogJ2Vycm9yUGF5bG9hZCd9KVxuICAgICAgICAgICAgLmdldEluKFsnX3JlcXVlc3RTdGF0ZScsICdURVNUX0VSUk9SJywgJ2Vycm9yJ10pLFxuICAgICAgICAnZXJyb3JQYXlsb2FkJyxcbiAgICAgICAgJ19yZXF1ZXN0U3RhdGUuZXJyb3IgZXF1YWxzIHBheWxvYWQgd2hlbiBhY3Rpb24gdHlwZSBlbmRzIHdpdGggX0VSUk9SJ1xuICAgICk7XG5cbiAgICB0dC5pcyhcbiAgICAgICAgRW50aXR5UmVkdWNlcih1bmRlZmluZWQsIGV4YW1wbGVBY3Rpb24pXG4gICAgICAgICAgICAuZ2V0SW4oWydfcmVxdWVzdFN0YXRlJywgJ215VHlwZScsICdlcnJvciddKSxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgJ19yZXF1ZXN0U3RhdGUuZXJyb3IgZXF1YWxzIGlzIG51bGwgd2hlbiBhY3Rpb24gdHlwZSBkb2VzIG5vdCBlbmQgd2l0aCBfRVJST1InXG4gICAgKTtcblxuICAgIGNvbnN0IGV4YW1wbGVTdGF0ZSA9IGZyb21KUyh7XG4gICAgICAgIHRoaW5nOiB7XG4gICAgICAgICAgICBhYmM6ICcxMjMnXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHR0LnRydWUoXG4gICAgICAgIGlzKFxuICAgICAgICAgICAgRW50aXR5UmVkdWNlcihleGFtcGxlU3RhdGUsIGV4YW1wbGVBY3Rpb24pLmdldCgndGhpbmcnKSxcbiAgICAgICAgICAgIGZyb21KUyh7YWJjOiAnMTIzJ30pXG4gICAgICAgICksXG4gICAgICAgICdkYXRhIG9uIHN0YXRlIGlzIHVuY2hhbmdlZCB3aGVuIG5vdCByZWNlaXZpbmcgZGF0YSdcbiAgICApO1xuXG4gICAgY29uc3QgZXhhbXBsZVN0YXRlV2l0aFJlc3VsdHMgPSBmcm9tSlMoe1xuICAgICAgICB0aGluZzoge1xuICAgICAgICAgICAgYWJjOiAnMTIzJ1xuICAgICAgICB9LFxuICAgICAgICBfcmVzdWx0OiB7XG4gICAgICAgICAgICBURVNUX0ZFVENIOiBbXG4gICAgICAgICAgICAgICAgJ3h5eidcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBURVNUX09USEVSX0ZFVENIOiBbXG4gICAgICAgICAgICAgICAgJ3h5eidcbiAgICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgdHQudHJ1ZShcbiAgICAgICAgaXMoXG4gICAgICAgICAgICBFbnRpdHlSZWR1Y2VyKGV4YW1wbGVTdGF0ZVdpdGhSZXN1bHRzLCBleGFtcGxlQWN0aW9uKS5nZXQoJ19yZXN1bHQnKSxcbiAgICAgICAgICAgIGV4YW1wbGVTdGF0ZVdpdGhSZXN1bHRzLmdldCgnX3Jlc3VsdCcpXG4gICAgICAgICksXG4gICAgICAgICdzdGF0ZS5fcmVzdWx0IGlzIHVuY2hhbmdlZCB3aGVuIG5vdCByZWNlaXZpbmcgZGF0YSdcbiAgICApO1xuXG4gICAgdHQudHJ1ZShcbiAgICAgICAgaXMoXG4gICAgICAgICAgICBFbnRpdHlSZWR1Y2VyKGV4YW1wbGVTdGF0ZVdpdGhSZXN1bHRzLCB7dHlwZTogJ1RFU1RfRkVUQ0gnfSkuZ2V0KCdfcmVzdWx0JyksXG4gICAgICAgICAgICBleGFtcGxlU3RhdGVXaXRoUmVzdWx0cy5nZXQoJ19yZXN1bHQnKS5kZWxldGUoJ1RFU1RfRkVUQ0gnKVxuICAgICAgICApLFxuICAgICAgICAnc3RhdGUuX3Jlc3VsdC5UWVBFIGlzIGRlbGV0ZWQgd2hlbiBUWVBFIGlzIGZldGNoZWQnXG4gICAgKTtcblxuICAgIGNvbnN0IGV4YW1wbGVBY3Rpb25Ob1Jlc3VsdFJlc2V0ID0ge1xuICAgICAgICB0eXBlOiAnVEVTVF9GRVRDSCcsXG4gICAgICAgIG1ldGE6IHtcbiAgICAgICAgICAgIHJlc3VsdFJlc2V0T25GZXRjaDogZmFsc2VcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB0dC50cnVlKFxuICAgICAgICBpcyhcbiAgICAgICAgICAgIEVudGl0eVJlZHVjZXIoZXhhbXBsZVN0YXRlV2l0aFJlc3VsdHMsIGV4YW1wbGVBY3Rpb25Ob1Jlc3VsdFJlc2V0KS5nZXQoJ19yZXN1bHQnKSxcbiAgICAgICAgICAgIGV4YW1wbGVTdGF0ZVdpdGhSZXN1bHRzLmdldCgnX3Jlc3VsdCcpXG4gICAgICAgICksXG4gICAgICAgICdzdGF0ZS5fcmVzdWx0LlRZUEUgaXMgdW5jaGFuZ2VkIHdoZW4gYSB0eXBlIGlzIGZldGNoZWQgQU5EIG1ldGEucmVzdWx0UmVzZXRPbkZldGNoIGlzIHRydWUnXG4gICAgKTtcblxuICAgIGNvbnN0IGV4YW1wbGVQYXlsb2FkID0ge1xuICAgICAgICBzdWJyZWRkaXQ6IHtcbiAgICAgICAgICAgIG5hbWU6IFwiTWVjaGFuaWNhbEtleWJvYXJkc1wiLFxuICAgICAgICAgICAgZnVsbG5hbWVJZDogXCJNS1wiLFxuICAgICAgICAgICAgdG9wTGlzdGluZ3M6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwiZnVsbG5hbWVJZFwiOiBcIkNUXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCJDb29sIHRpdGxlXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJmdWxsbmFtZUlkXCI6IFwiTlRcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIk5pY2UgdGl0bGVcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCBleGFtcGxlUmVjZWl2ZUFjdGlvbiA9IHtcbiAgICAgICAgdHlwZTogJ1RFU1RfUkVDRUlWRScsXG4gICAgICAgIHBheWxvYWQ6IGV4YW1wbGVQYXlsb2FkXG4gICAgfTtcblxuICAgIHR0LmlzKFxuICAgICAgICBFbnRpdHlSZWR1Y2VyKGV4YW1wbGVTdGF0ZSwgZXhhbXBsZVJlY2VpdmVBY3Rpb24pLmdldEluKFsnX3Jlc3VsdCcsICdURVNUX1JFQ0VJVkUnLCAnc3VicmVkZGl0J10pLFxuICAgICAgICAnTUsnLFxuICAgICAgICAnTm9ybWFsaXplZCByZXN1bHRzIGFyZSBzdG9yZWQgaW4gc3RhdGUgdW5kZXIgX3Jlc3VsdC5BQ1RJT05OQU1FLktFWSdcbiAgICApO1xuXG4gICAgdHQudHJ1ZShcbiAgICAgICAgaXMoXG4gICAgICAgICAgICBFbnRpdHlSZWR1Y2VyKGV4YW1wbGVTdGF0ZSwgZXhhbXBsZVJlY2VpdmVBY3Rpb24pXG4gICAgICAgICAgICAgICAgLmdldEluKFsnc3VicmVkZGl0JywgJ01LJ10pXG4gICAgICAgICAgICAgICAgLmRlbGV0ZSgndG9wTGlzdGluZ3MnKSxcbiAgICAgICAgICAgIGZyb21KUyhleGFtcGxlUGF5bG9hZC5zdWJyZWRkaXQpLmRlbGV0ZSgndG9wTGlzdGluZ3MnKVxuICAgICAgICApLFxuICAgICAgICAnTm9ybWFsaXplZCBlbnRpdGllcyBhcmUgc3RvcmVkIGluIHN0YXRlIHVuZGVyIEVOVElUWU5BTUUuSUQnXG4gICAgKTtcblxuICAgIHR0LnRydWUoXG4gICAgICAgIGlzKFxuICAgICAgICAgICAgRW50aXR5UmVkdWNlcihleGFtcGxlU3RhdGUsIGV4YW1wbGVSZWNlaXZlQWN0aW9uKS5nZXRJbihbJ3RvcExpc3RpbmdzJywgJ05UJ10pLFxuICAgICAgICAgICAgZnJvbUpTKGV4YW1wbGVQYXlsb2FkLnN1YnJlZGRpdC50b3BMaXN0aW5nc1sxXSlcbiAgICAgICAgKSxcbiAgICAgICAgJ05vcm1hbGl6ZWQgbmVzdGVkIGVudGl0aWVzIGFyZSBzdG9yZWQgaW4gc3RhdGUgdW5kZXIgRU5USVRZTkFNRS5JRCdcbiAgICApO1xuXG4gICAgY29uc3QgbWVyZ2VFeGFtcGxlUGF5bG9hZE9uZSA9IHtcbiAgICAgICAgc3VicmVkZGl0OiB7XG4gICAgICAgICAgICBuYW1lOiBcIk1lY2hhbmljYWxLZXlib2FyZHNcIixcbiAgICAgICAgICAgIGNvZGU6IFwiMTIzXCIsXG4gICAgICAgICAgICBmdWxsbmFtZUlkOiBcIk1LXCIsXG4gICAgICAgICAgICB0b3BMaXN0aW5nczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJmdWxsbmFtZUlkXCI6IFwiQ1RcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIkNvb2wgdGl0bGVcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcImZ1bGxuYW1lSWRcIjogXCJOVFwiLFxuICAgICAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwiTmljZSB0aXRsZVwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIHRhZ3M6IFtcbiAgICAgICAgICAgICAgICBcIkFcIixcbiAgICAgICAgICAgICAgICBcIkJcIlxuICAgICAgICAgICAgXVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIGNvbnN0IG1lcmdlRXhhbXBsZVJlY2VpdmVBY3Rpb25PbmUgPSB7XG4gICAgICAgIHR5cGU6ICdURVNUX1JFQ0VJVkUnLFxuICAgICAgICBwYXlsb2FkOiBtZXJnZUV4YW1wbGVQYXlsb2FkT25lXG4gICAgfTtcblxuICAgIGNvbnN0IG1lcmdlRXhhbXBsZVBheWxvYWRUd28gPSB7XG4gICAgICAgIHN1YnJlZGRpdDoge1xuICAgICAgICAgICAgbmFtZTogXCJNZWNoYW5pY2FsS2V5Ym9hcmRzIVwiLFxuICAgICAgICAgICAgZnVsbG5hbWVJZDogXCJNS1wiLFxuICAgICAgICAgICAgdG9wTGlzdGluZ3M6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwiZnVsbG5hbWVJZFwiOiBcIk5UXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCJOaWNlIHRpdGxlIVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwiZnVsbG5hbWVJZFwiOiBcIkdMXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCJHb29kIGx1Y2tcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB0YWdzOiBbXG4gICAgICAgICAgICAgICAgXCJDXCIsXG4gICAgICAgICAgICAgICAgXCJEXCJcbiAgICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCBtZXJnZUV4YW1wbGVSZWNlaXZlQWN0aW9uVHdvID0ge1xuICAgICAgICB0eXBlOiAnVEVTVF9SRUNFSVZFJyxcbiAgICAgICAgcGF5bG9hZDogbWVyZ2VFeGFtcGxlUGF5bG9hZFR3b1xuICAgIH07XG5cbiAgICBjb25zdCBtZXJnZVN0YXRlT25lID0gRW50aXR5UmVkdWNlcihleGFtcGxlU3RhdGUsIG1lcmdlRXhhbXBsZVJlY2VpdmVBY3Rpb25PbmUpO1xuICAgIGNvbnN0IG1lcmdlU3RhdGVUd28gPSBFbnRpdHlSZWR1Y2VyKG1lcmdlU3RhdGVPbmUsIG1lcmdlRXhhbXBsZVJlY2VpdmVBY3Rpb25Ud28pO1xuXG4gICAgdHQuaXMoXG4gICAgICAgIG1lcmdlU3RhdGVUd28uZ2V0SW4oWydzdWJyZWRkaXQnLCAnTUsnLCAnbmFtZSddKSxcbiAgICAgICAgbWVyZ2VFeGFtcGxlUGF5bG9hZFR3by5zdWJyZWRkaXQubmFtZSxcbiAgICAgICAgJ1JlY2VpdmluZyB1cGRhdGVkIHZhbHVlcyBvbiB0aGUgdG9wIGxldmVsIG9mIGFuIGVudGl0eSBpdGVtIHdpbGwgcmVwbGFjZSBleGlzdGluZyB2YWx1ZXMnXG4gICAgKTtcblxuICAgIHR0LnRydWUoXG4gICAgICAgIGlzKFxuICAgICAgICAgICAgbWVyZ2VTdGF0ZVR3by5nZXRJbihbJ3N1YnJlZGRpdCcsICdNSycsICd0YWdzJ10pLFxuICAgICAgICAgICAgZnJvbUpTKG1lcmdlRXhhbXBsZVBheWxvYWRUd28uc3VicmVkZGl0LnRhZ3MpXG4gICAgICAgICksXG4gICAgICAgICdSZWNlaXZpbmcgdXBkYXRlZCBub24tZW50aXR5IHZhbHVlcyBvbiB0aGUgc2Vjb25kIGxldmVsIG9mIGFuIGVudGl0eSBhcmUgbm90IG1lcmdlZCwgdGhleSBhcmUgcmVwbGFjZWQnXG4gICAgKTtcblxuICAgIHR0LmlzKFxuICAgICAgICBtZXJnZVN0YXRlVHdvLmdldEluKFsnc3VicmVkZGl0JywgJ01LJywgJ2NvZGUnXSksXG4gICAgICAgIG1lcmdlRXhhbXBsZVBheWxvYWRPbmUuc3VicmVkZGl0LmNvZGUsXG4gICAgICAgICdFeGlzdGluZyB0b3AgbGV2ZWwga2V5cyBhbmQgdmFsdWVzIG9uIGFuIGVudGl0eSBpdGVtIHdpbGwgcmVtYWluIHdoZW4gc3Vic2VxdWVudCByZWNlaXZlZCBkYXRhIGRvZXMgbm90IGNvbnRhaW4gdGhvc2UgdG9wIGxldmVsIGtleXMnXG4gICAgKTtcblxuICAgIHR0LnRydWUoXG4gICAgICAgIGlzKFxuICAgICAgICAgICAgbWVyZ2VTdGF0ZVR3by5nZXRJbihbJ3RvcExpc3RpbmdzJywgJ05UJ10pLFxuICAgICAgICAgICAgZnJvbUpTKG1lcmdlRXhhbXBsZVBheWxvYWRUd28uc3VicmVkZGl0LnRvcExpc3RpbmdzWzBdKVxuICAgICAgICApLFxuICAgICAgICAnUmVjZWl2aW5nIHVwZGF0ZWQgaW5mbyBmb3IgYW4gZW50aXR5IHdpbGwgcmVwbGFjZSBuZXN0ZWQgZW50aXRpZXMnXG4gICAgKTtcblxuICAgIHR0LnRydWUoXG4gICAgICAgIGlzKFxuICAgICAgICAgICAgbWVyZ2VTdGF0ZVR3by5nZXRJbihbJ3RvcExpc3RpbmdzJywgJ0NUJ10pLFxuICAgICAgICAgICAgZnJvbUpTKG1lcmdlRXhhbXBsZVBheWxvYWRPbmUuc3VicmVkZGl0LnRvcExpc3RpbmdzWzBdKVxuICAgICAgICApLFxuICAgICAgICAnT25jZSBhbiBlbnRpdHkgaXMgcmVjZWl2ZWQsIGl0cyBlbnRpdHkgZGF0YSBpcyByZXRhaW5lZCBldmVuIGlmIHN1YnNlcXVlbnQgcmVjZWl2ZWQgZW50aXRpZXMgZG9udCBjb250YWluIGl0J1xuICAgICk7XG5cbiAgICB0dC50cnVlKFxuICAgICAgICBpcyhcbiAgICAgICAgICAgIG1lcmdlU3RhdGVUd28uZ2V0SW4oWyd0b3BMaXN0aW5ncycsICdHTCddKSxcbiAgICAgICAgICAgIGZyb21KUyhtZXJnZUV4YW1wbGVQYXlsb2FkVHdvLnN1YnJlZGRpdC50b3BMaXN0aW5nc1sxXSlcbiAgICAgICAgKSxcbiAgICAgICAgJ05ld2x5IHJlY2VpdmVkIG5lc3RlZCBlbnRpdGVzIGFyZSBtZXJnZWQgaW50byB0aGVpciBlbnRpdHkgY29udGFpbmVyJ1xuICAgICk7XG5cbn0pO1xuIl19