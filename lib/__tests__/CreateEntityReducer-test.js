'use strict';

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _CreateEntityReducer = require('../CreateEntityReducer');

var _normalizr = require('normalizr');

var _immutable = require('immutable');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//
// Schemas
//


var SubredditSchema = new _normalizr.Schema('subreddit', { idAttribute: 'fullnameId' });
var AuthorSchema = new _normalizr.Schema('author', { idAttribute: 'fullnameId' });
var TopListingSchema = new _normalizr.Schema('topListings', { idAttribute: 'fullnameId' });

TopListingSchema.define({
    author: AuthorSchema
});

SubredditSchema.define({
    topListings: (0, _normalizr.arrayOf)(TopListingSchema)
});

var EntitySchema = {
    subreddit: SubredditSchema
};

(0, _ava2.default)('CreateEntityReducer', function (tt) {

    var schemaMap = {
        mainSchema: EntitySchema,
        TEST_RECEIVE: EntitySchema
    };

    var EntityReducer = (0, _CreateEntityReducer.createEntityReducer)(schemaMap, function (key, value) {
        return value;
    });

    var exampleAction = {
        type: "myType"
    };

    tt.true((0, _immutable.is)(EntityReducer(undefined, exampleAction).get('_schema'), (0, _immutable.Map)(schemaMap)), 'Immutable version of schema is returned under _schema when reducer is called with no existing state');

    tt.true((0, _immutable.is)(EntityReducer(undefined, exampleAction).get('_result'), (0, _immutable.Map)()), '_result is empty  when reducer is called with no existing state');

    tt.true(EntityReducer(undefined, { type: 'TEST_FETCH' }).getIn(['_requestState', 'TEST_FETCH', 'fetch']), '_requestState.fetch is true when action type ends with _FETCH');

    tt.false(EntityReducer(undefined, exampleAction).getIn(['_requestState', 'myType', 'fetch']), '_requestState.fetch is false when action type does not end with _FETCH');

    tt.is(EntityReducer(undefined, { type: 'TEST_ERROR', payload: 'errorPayload' }).getIn(['_requestState', 'TEST_ERROR', 'error']), 'errorPayload', '_requestState.error equals payload when action type ends with _ERROR');

    tt.is(EntityReducer(undefined, exampleAction).getIn(['_requestState', 'myType', 'error']), null, '_requestState.error equals is null when action type does not end with _ERROR');

    var exampleState = (0, _immutable.fromJS)({
        thing: {
            abc: '123'
        }
    });

    tt.true((0, _immutable.is)(EntityReducer(exampleState, exampleAction).get('thing'), (0, _immutable.fromJS)({ abc: '123' })), 'data on state is unchanged when not receiving data');

    var exampleStateWithResults = (0, _immutable.fromJS)({
        thing: {
            abc: '123'
        },
        _result: {
            TEST_FETCH: ['xyz'],
            TEST_OTHER_FETCH: ['xyz']
        }
    });

    tt.true((0, _immutable.is)(EntityReducer(exampleStateWithResults, exampleAction).get('_result'), exampleStateWithResults.get('_result')), 'state._result is unchanged when not receiving data');

    tt.true((0, _immutable.is)(EntityReducer(exampleStateWithResults, { type: 'TEST_FETCH' }).get('_result'), exampleStateWithResults.get('_result').delete('TEST_FETCH')), 'state._result.TYPE is deleted when TYPE is fetched');

    var exampleActionNoResultReset = {
        type: 'TEST_FETCH',
        meta: {
            resultResetOnFetch: false
        }
    };

    tt.true((0, _immutable.is)(EntityReducer(exampleStateWithResults, exampleActionNoResultReset).get('_result'), exampleStateWithResults.get('_result')), 'state._result.TYPE is unchanged when a type is fetched AND meta.resultResetOnFetch is true');

    var examplePayload = {
        subreddit: {
            name: "MechanicalKeyboards",
            fullnameId: "MK",
            topListings: [{
                "fullnameId": "CT",
                "title": "Cool title"
            }, {
                "fullnameId": "NT",
                "title": "Nice title"
            }]
        }
    };

    var exampleReceiveAction = {
        type: 'TEST_RECEIVE',
        payload: examplePayload
    };

    tt.is(EntityReducer(exampleState, exampleReceiveAction).getIn(['_result', 'TEST_RECEIVE', 'subreddit']), 'MK', 'Normalized results are stored in state under _result.ACTIONNAME.KEY');

    tt.true((0, _immutable.is)(EntityReducer(exampleState, exampleReceiveAction).getIn(['subreddit', 'MK']).delete('topListings'), (0, _immutable.fromJS)(examplePayload.subreddit).delete('topListings')), 'Normalized entities are stored in state under ENTITYNAME.ID');

    tt.true((0, _immutable.is)(EntityReducer(exampleState, exampleReceiveAction).getIn(['topListings', 'NT']), (0, _immutable.fromJS)(examplePayload.subreddit.topListings[1])), 'Normalized nested entities are stored in state under ENTITYNAME.ID');

    var mergeExamplePayloadOne = {
        subreddit: {
            name: "MechanicalKeyboards",
            code: "123",
            fullnameId: "MK",
            topListings: [{
                "fullnameId": "CT",
                "title": "Cool title"
            }, {
                "fullnameId": "NT",
                "title": "Nice title"
            }],
            tags: ["A", "B"]
        }
    };

    var mergeExampleReceiveActionOne = {
        type: 'TEST_RECEIVE',
        payload: mergeExamplePayloadOne
    };

    var mergeExamplePayloadTwo = {
        subreddit: {
            name: "MechanicalKeyboards!",
            fullnameId: "MK",
            topListings: [{
                "fullnameId": "NT",
                "title": "Nice title!"
            }, {
                "fullnameId": "GL",
                "title": "Good luck"
            }],
            tags: ["C", "D"]
        }
    };

    var mergeExampleReceiveActionTwo = {
        type: 'TEST_RECEIVE',
        payload: mergeExamplePayloadTwo
    };

    var mergeStateOne = EntityReducer(exampleState, mergeExampleReceiveActionOne);
    var mergeStateTwo = EntityReducer(mergeStateOne, mergeExampleReceiveActionTwo);

    tt.is(mergeStateTwo.getIn(['subreddit', 'MK', 'name']), mergeExamplePayloadTwo.subreddit.name, 'Receiving updated values on the top level of an entity item will replace existing values');

    tt.true((0, _immutable.is)(mergeStateTwo.getIn(['subreddit', 'MK', 'tags']), (0, _immutable.fromJS)(mergeExamplePayloadTwo.subreddit.tags)), 'Receiving updated non-entity values on the second level of an entity are not merged, they are replaced');

    tt.is(mergeStateTwo.getIn(['subreddit', 'MK', 'code']), mergeExamplePayloadOne.subreddit.code, 'Existing top level keys and values on an entity item will remain when subsequent received data does not contain those top level keys');

    tt.true((0, _immutable.is)(mergeStateTwo.getIn(['topListings', 'NT']), (0, _immutable.fromJS)(mergeExamplePayloadTwo.subreddit.topListings[0])), 'Receiving updated info for an entity will replace nested entities');

    tt.true((0, _immutable.is)(mergeStateTwo.getIn(['topListings', 'CT']), (0, _immutable.fromJS)(mergeExamplePayloadOne.subreddit.topListings[0])), 'Once an entity is received, its entity data is retained even if subsequent received entities dont contain it');

    tt.true((0, _immutable.is)(mergeStateTwo.getIn(['topListings', 'GL']), (0, _immutable.fromJS)(mergeExamplePayloadTwo.subreddit.topListings[1])), 'Newly received nested entites are merged into their entity container');
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fX3Rlc3RzX18vQ3JlYXRlRW50aXR5UmVkdWNlci10ZXN0LmpzIl0sIm5hbWVzIjpbIlN1YnJlZGRpdFNjaGVtYSIsImlkQXR0cmlidXRlIiwiQXV0aG9yU2NoZW1hIiwiVG9wTGlzdGluZ1NjaGVtYSIsImRlZmluZSIsImF1dGhvciIsInRvcExpc3RpbmdzIiwiRW50aXR5U2NoZW1hIiwic3VicmVkZGl0Iiwic2NoZW1hTWFwIiwibWFpblNjaGVtYSIsIlRFU1RfUkVDRUlWRSIsIkVudGl0eVJlZHVjZXIiLCJrZXkiLCJ2YWx1ZSIsImV4YW1wbGVBY3Rpb24iLCJ0eXBlIiwidHQiLCJ0cnVlIiwidW5kZWZpbmVkIiwiZ2V0IiwiZ2V0SW4iLCJmYWxzZSIsImlzIiwicGF5bG9hZCIsImV4YW1wbGVTdGF0ZSIsInRoaW5nIiwiYWJjIiwiZXhhbXBsZVN0YXRlV2l0aFJlc3VsdHMiLCJfcmVzdWx0IiwiVEVTVF9GRVRDSCIsIlRFU1RfT1RIRVJfRkVUQ0giLCJkZWxldGUiLCJleGFtcGxlQWN0aW9uTm9SZXN1bHRSZXNldCIsIm1ldGEiLCJyZXN1bHRSZXNldE9uRmV0Y2giLCJleGFtcGxlUGF5bG9hZCIsIm5hbWUiLCJmdWxsbmFtZUlkIiwiZXhhbXBsZVJlY2VpdmVBY3Rpb24iLCJtZXJnZUV4YW1wbGVQYXlsb2FkT25lIiwiY29kZSIsInRhZ3MiLCJtZXJnZUV4YW1wbGVSZWNlaXZlQWN0aW9uT25lIiwibWVyZ2VFeGFtcGxlUGF5bG9hZFR3byIsIm1lcmdlRXhhbXBsZVJlY2VpdmVBY3Rpb25Ud28iLCJtZXJnZVN0YXRlT25lIiwibWVyZ2VTdGF0ZVR3byJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7OztBQUNBOztBQUNBOztBQUNBOzs7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQSxJQUFJQSxrQkFBa0Isc0JBQVcsV0FBWCxFQUF3QixFQUFDQyxhQUFhLFlBQWQsRUFBeEIsQ0FBdEI7QUFDQSxJQUFJQyxlQUFlLHNCQUFXLFFBQVgsRUFBcUIs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UCxDQUZKLENBREosRUFLSSxzRUFMSjtBQVFILENBbFFEIiwiZmlsZSI6IkNyZWF0ZUVudGl0eVJlZHVjZXItdGVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0ZXN0IGZyb20gJ2F2YSc7XG5pbXBvcnQge2NyZWF0ZUVudGl0eVJlZHVjZXJ9IGZyb20gJy4uL0NyZWF0ZUVudGl0eVJlZHVjZXInO1xuaW1wb3J0IHtTY2hlbWEsIGFycmF5T2Z9IGZyb20gJ25vcm1hbGl6cic7XG5pbXBvcnQge2lzLCBmcm9tSlMsIE1hcH0gZnJvbSAnaW1tdXRhYmxlJztcblxuLy9cbi8vIFNjaGVtYXNcbi8vXG5cblxudmFyIFN1YnJlZGRpdFNjaGVtYSA9IG5ldyBTY2hlbWEoJ3N1YnJlZGRpdCcsIHtpZEF0dHJpYnV0ZTogJ2Z1bGxuYW1lSWQnfSk7XG52YXIgQXV0aG9yU2NoZW1hID0gbmV3IFNjaGVtYSgnYXV0aG9yJywge2lkQXR0cmlidXRlOiAnZnVsbG5hbWVJZCd9KTtcbnZhciBUb3BMaXN0aW5nU2NoZW1hID0gbmV3IFNjaGVtYSgndG9wTGlzdGluZ3MnLCB7aWRBdHRyaWJ1dGU6ICdmdWxsbmFtZUlkJ30pO1xuXG5Ub3BMaXN0aW5nU2NoZW1hLmRlZmluZSh7XG4gICAgYXV0aG9yOiBBdXRob3JTY2hlbWFcbn0pO1xuXG5TdWJyZWRkaXRTY2hlbWEuZGVmaW5lKHtcbiAgICB0b3BMaXN0aW5nczogYXJyYXlPZihUb3BMaXN0aW5nU2NoZW1hKVxufSk7XG5cbmNvbnN0IEVudGl0eVNjaGVtYSA9IHtcbiAgICBzdWJyZWRkaXQ6IFN1YnJlZGRpdFNjaGVtYVxufVxuXG50ZXN0KCdDcmVhdGVFbnRpdHlSZWR1Y2VyJywgdHQgPT4ge1xuXG4gICAgY29uc3Qgc2NoZW1hTWFwID0ge1xuICAgICAgICBtYWluU2NoZW1hOiBFbnRpdHlTY2hlbWEsXG4gICAgICAgIFRFU1RfUkVDRUlWRTogRW50aXR5U2NoZW1hXG4gICAgfTtcblxuICAgIGNvbnN0IEVudGl0eVJlZHVjZXIgPSBjcmVhdGVFbnRpdHlSZWR1Y2VyKHNjaGVtYU1hcCwgKGtleSwgdmFsdWUpID0+IHZhbHVlKTtcblxuICAgIGNvbnN0IGV4YW1wbGVBY3Rpb24gPSB7XG4gICAgICAgIHR5cGU6IFwibXlUeXBlXCJcbiAgICB9O1xuXG4gICAgdHQudHJ1ZShcbiAgICAgICAgaXMoXG4gICAgICAgICAgICBFbnRpdHlSZWR1Y2VyKHVuZGVmaW5lZCwgZXhhbXBsZUFjdGlvbikuZ2V0KCdfc2NoZW1hJyksXG4gICAgICAgICAgICBNYXAoc2NoZW1hTWFwKVxuICAgICAgICApLFxuICAgICAgICAnSW1tdXRhYmxlIHZlcnNpb24gb2Ygc2NoZW1hIGlzIHJldHVybmVkIHVuZGVyIF9zY2hlbWEgd2hlbiByZWR1Y2VyIGlzIGNhbGxlZCB3aXRoIG5vIGV4aXN0aW5nIHN0YXRlJ1xuICAgICk7XG5cbiAgICB0dC50cnVlKFxuICAgICAgICBpcyhcbiAgICAgICAgICAgIEVudGl0eVJlZHVjZXIodW5kZWZpbmVkLCBleGFtcGxlQWN0aW9uKS5nZXQoJ19yZXN1bHQnKSxcbiAgICAgICAgICAgIE1hcCgpXG4gICAgICAgICksXG4gICAgICAgICdfcmVzdWx0IGlzIGVtcHR5ICB3aGVuIHJlZHVjZXIgaXMgY2FsbGVkIHdpdGggbm8gZXhpc3Rpbmcgc3RhdGUnXG4gICAgKTtcblxuICAgIHR0LnRydWUoXG4gICAgICAgIEVudGl0eVJlZHVjZXIodW5kZWZpbmVkLCB7dHlwZTogJ1RFU1RfRkVUQ0gnfSlcbiAgICAgICAgICAgIC5nZXRJbihbJ19yZXF1ZXN0U3RhdGUnLCAnVEVTVF9GRVRDSCcsICdmZXRjaCddKSxcbiAgICAgICAgJ19yZXF1ZXN0U3RhdGUuZmV0Y2ggaXMgdHJ1ZSB3aGVuIGFjdGlvbiB0eXBlIGVuZHMgd2l0aCBfRkVUQ0gnXG4gICAgKTtcblxuICAgIHR0LmZhbHNlKFxuICAgICAgICBFbnRpdHlSZWR1Y2VyKHVuZGVmaW5lZCwgZXhhbXBsZUFjdGlvbilcbiAgICAgICAgICAgIC5nZXRJbihbJ19yZXF1ZXN0U3RhdGUnLCAnbXlUeXBlJywgJ2ZldGNoJ10pLFxuICAgICAgICAnX3JlcXVlc3RTdGF0ZS5mZXRjaCBpcyBmYWxzZSB3aGVuIGFjdGlvbiB0eXBlIGRvZXMgbm90IGVuZCB3aXRoIF9GRVRDSCdcbiAgICApO1xuXG4gICAgdHQuaXMoXG4gICAgICAgIEVudGl0eVJlZHVjZXIodW5kZWZpbmVkLCB7dHlwZTogJ1RFU1RfRVJST1InLCBwYXlsb2FkOiAnZXJyb3JQYXlsb2FkJ30pXG4gICAgICAgICAgICAuZ2V0SW4oWydfcmVxdWVzdFN0YXRlJywgJ1RFU1RfRVJST1InLCAnZXJyb3InXSksXG4gICAgICAgICdlcnJvclBheWxvYWQnLFxuICAgICAgICAnX3JlcXVlc3RTdGF0ZS5lcnJvciBlcXVhbHMgcGF5bG9hZCB3aGVuIGFjdGlvbiB0eXBlIGVuZHMgd2l0aCBfRVJST1InXG4gICAgKTtcblxuICAgIHR0LmlzKFxuICAgICAgICBFbnRpdHlSZWR1Y2VyKHVuZGVmaW5lZCwgZXhhbXBsZUFjdGlvbilcbiAgICAgICAgICAgIC5nZXRJbihbJ19yZXF1ZXN0U3RhdGUnLCAnbXlUeXBlJywgJ2Vycm9yJ10pLFxuICAgICAgICBudWxsLFxuICAgICAgICAnX3JlcXVlc3RTdGF0ZS5lcnJvciBlcXVhbHMgaXMgbnVsbCB3aGVuIGFjdGlvbiB0eXBlIGRvZXMgbm90IGVuZCB3aXRoIF9FUlJPUidcbiAgICApO1xuXG4gICAgY29uc3QgZXhhbXBsZVN0YXRlID0gZnJvbUpTKHtcbiAgICAgICAgdGhpbmc6IHtcbiAgICAgICAgICAgIGFiYzogJzEyMydcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgdHQudHJ1ZShcbiAgICAgICAgaXMoXG4gICAgICAgICAgICBFbnRpdHlSZWR1Y2VyKGV4YW1wbGVTdGF0ZSwgZXhhbXBsZUFjdGlvbikuZ2V0KCd0aGluZycpLFxuICAgICAgICAgICAgZnJvbUpTKHthYmM6ICcxMjMnfSlcbiAgICAgICAgKSxcbiAgICAgICAgJ2RhdGEgb24gc3RhdGUgaXMgdW5jaGFuZ2VkIHdoZW4gbm90IHJlY2VpdmluZyBkYXRhJ1xuICAgICk7XG5cbiAgICBjb25zdCBleGFtcGxlU3RhdGVXaXRoUmVzdWx0cyA9IGZyb21KUyh7XG4gICAgICAgIHRoaW5nOiB7XG4gICAgICAgICAgICBhYmM6ICcxMjMnXG4gICAgICAgIH0sXG4gICAgICAgIF9yZXN1bHQ6IHtcbiAgICAgICAgICAgIFRFU1RfRkVUQ0g6IFtcbiAgICAgICAgICAgICAgICAneHl6J1xuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFRFU1RfT1RIRVJfRkVUQ0g6IFtcbiAgICAgICAgICAgICAgICAneHl6J1xuICAgICAgICAgICAgXVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICB0dC50cnVlKFxuICAgICAgICBpcyhcbiAgICAgICAgICAgIEVudGl0eVJlZHVjZXIoZXhhbXBsZVN0YXRlV2l0aFJlc3VsdHMsIGV4YW1wbGVBY3Rpb24pLmdldCgnX3Jlc3VsdCcpLFxuICAgICAgICAgICAgZXhhbXBsZVN0YXRlV2l0aFJlc3VsdHMuZ2V0KCdfcmVzdWx0JylcbiAgICAgICAgKSxcbiAgICAgICAgJ3N0YXRlLl9yZXN1bHQgaXMgdW5jaGFuZ2VkIHdoZW4gbm90IHJlY2VpdmluZyBkYXRhJ1xuICAgICk7XG5cbiAgICB0dC50cnVlKFxuICAgICAgICBpcyhcbiAgICAgICAgICAgIEVudGl0eVJlZHVjZXIoZXhhbXBsZVN0YXRlV2l0aFJlc3VsdHMsIHt0eXBlOiAnVEVTVF9GRVRDSCd9KS5nZXQoJ19yZXN1bHQnKSxcbiAgICAgICAgICAgIGV4YW1wbGVTdGF0ZVdpdGhSZXN1bHRzLmdldCgnX3Jlc3VsdCcpLmRlbGV0ZSgnVEVTVF9GRVRDSCcpXG4gICAgICAgICksXG4gICAgICAgICdzdGF0ZS5fcmVzdWx0LlRZUEUgaXMgZGVsZXRlZCB3aGVuIFRZUEUgaXMgZmV0Y2hlZCdcbiAgICApO1xuXG4gICAgY29uc3QgZXhhbXBsZUFjdGlvbk5vUmVzdWx0UmVzZXQgPSB7XG4gICAgICAgIHR5cGU6ICdURVNUX0ZFVENIJyxcbiAgICAgICAgbWV0YToge1xuICAgICAgICAgICAgcmVzdWx0UmVzZXRPbkZldGNoOiBmYWxzZVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIHR0LnRydWUoXG4gICAgICAgIGlzKFxuICAgICAgICAgICAgRW50aXR5UmVkdWNlcihleGFtcGxlU3RhdGVXaXRoUmVzdWx0cywgZXhhbXBsZUFjdGlvbk5vUmVzdWx0UmVzZXQpLmdldCgnX3Jlc3VsdCcpLFxuICAgICAgICAgICAgZXhhbXBsZVN0YXRlV2l0aFJlc3VsdHMuZ2V0KCdfcmVzdWx0JylcbiAgICAgICAgKSxcbiAgICAgICAgJ3N0YXRlLl9yZXN1bHQuVFlQRSBpcyB1bmNoYW5nZWQgd2hlbiBhIHR5cGUgaXMgZmV0Y2hlZCBBTkQgbWV0YS5yZXN1bHRSZXNldE9uRmV0Y2ggaXMgdHJ1ZSdcbiAgICApO1xuXG4gICAgY29uc3QgZXhhbXBsZVBheWxvYWQgPSB7XG4gICAgICAgIHN1YnJlZGRpdDoge1xuICAgICAgICAgICAgbmFtZTogXCJNZWNoYW5pY2FsS2V5Ym9hcmRzXCIsXG4gICAgICAgICAgICBmdWxsbmFtZUlkOiBcIk1LXCIsXG4gICAgICAgICAgICB0b3BMaXN0aW5nczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJmdWxsbmFtZUlkXCI6IFwiQ1RcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIkNvb2wgdGl0bGVcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcImZ1bGxuYW1lSWRcIjogXCJOVFwiLFxuICAgICAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwiTmljZSB0aXRsZVwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIGNvbnN0IGV4YW1wbGVSZWNlaXZlQWN0aW9uID0ge1xuICAgICAgICB0eXBlOiAnVEVTVF9SRUNFSVZFJyxcbiAgICAgICAgcGF5bG9hZDogZXhhbXBsZVBheWxvYWRcbiAgICB9O1xuXG4gICAgdHQuaXMoXG4gICAgICAgIEVudGl0eVJlZHVjZXIoZXhhbXBsZVN0YXRlLCBleGFtcGxlUmVjZWl2ZUFjdGlvbikuZ2V0SW4oWydfcmVzdWx0JywgJ1RFU1RfUkVDRUlWRScsICdzdWJyZWRkaXQnXSksXG4gICAgICAgICdNSycsXG4gICAgICAgICdOb3JtYWxpemVkIHJlc3VsdHMgYXJlIHN0b3JlZCBpbiBzdGF0ZSB1bmRlciBfcmVzdWx0LkFDVElPTk5BTUUuS0VZJ1xuICAgICk7XG5cbiAgICB0dC50cnVlKFxuICAgICAgICBpcyhcbiAgICAgICAgICAgIEVudGl0eVJlZHVjZXIoZXhhbXBsZVN0YXRlLCBleGFtcGxlUmVjZWl2ZUFjdGlvbikuZ2V0SW4oWydzdWJyZWRkaXQnLCAnTUsnXSkuZGVsZXRlKCd0b3BMaXN0aW5ncycpLFxuICAgICAgICAgICAgZnJvbUpTKGV4YW1wbGVQYXlsb2FkLnN1YnJlZGRpdCkuZGVsZXRlKCd0b3BMaXN0aW5ncycpXG4gICAgICAgICksXG4gICAgICAgICdOb3JtYWxpemVkIGVudGl0aWVzIGFyZSBzdG9yZWQgaW4gc3RhdGUgdW5kZXIgRU5USVRZTkFNRS5JRCdcbiAgICApO1xuXG4gICAgdHQudHJ1ZShcbiAgICAgICAgaXMoXG4gICAgICAgICAgICBFbnRpdHlSZWR1Y2VyKGV4YW1wbGVTdGF0ZSwgZXhhbXBsZVJlY2VpdmVBY3Rpb24pLmdldEluKFsndG9wTGlzdGluZ3MnLCAnTlQnXSksXG4gICAgICAgICAgICBmcm9tSlMoZXhhbXBsZVBheWxvYWQuc3VicmVkZGl0LnRvcExpc3RpbmdzWzFdKVxuICAgICAgICApLFxuICAgICAgICAnTm9ybWFsaXplZCBuZXN0ZWQgZW50aXRpZXMgYXJlIHN0b3JlZCBpbiBzdGF0ZSB1bmRlciBFTlRJVFlOQU1FLklEJ1xuICAgICk7XG5cbiAgICBjb25zdCBtZXJnZUV4YW1wbGVQYXlsb2FkT25lID0ge1xuICAgICAgICBzdWJyZWRkaXQ6IHtcbiAgICAgICAgICAgIG5hbWU6IFwiTWVjaGFuaWNhbEtleWJvYXJkc1wiLFxuICAgICAgICAgICAgY29kZTogXCIxMjNcIixcbiAgICAgICAgICAgIGZ1bGxuYW1lSWQ6IFwiTUtcIixcbiAgICAgICAgICAgIHRvcExpc3RpbmdzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcImZ1bGxuYW1lSWRcIjogXCJDVFwiLFxuICAgICAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwiQ29vbCB0aXRsZVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwiZnVsbG5hbWVJZFwiOiBcIk5UXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCJOaWNlIHRpdGxlXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgdGFnczogW1xuICAgICAgICAgICAgICAgIFwiQVwiLFxuICAgICAgICAgICAgICAgIFwiQlwiXG4gICAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3QgbWVyZ2VFeGFtcGxlUmVjZWl2ZUFjdGlvbk9uZSA9IHtcbiAgICAgICAgdHlwZTogJ1RFU1RfUkVDRUlWRScsXG4gICAgICAgIHBheWxvYWQ6IG1lcmdlRXhhbXBsZVBheWxvYWRPbmVcbiAgICB9O1xuXG4gICAgY29uc3QgbWVyZ2VFeGFtcGxlUGF5bG9hZFR3byA9IHtcbiAgICAgICAgc3VicmVkZGl0OiB7XG4gICAgICAgICAgICBuYW1lOiBcIk1lY2hhbmljYWxLZXlib2FyZHMhXCIsXG4gICAgICAgICAgICBmdWxsbmFtZUlkOiBcIk1LXCIsXG4gICAgICAgICAgICB0b3BMaXN0aW5nczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJmdWxsbmFtZUlkXCI6IFwiTlRcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIk5pY2UgdGl0bGUhXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJmdWxsbmFtZUlkXCI6IFwiR0xcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIkdvb2QgbHVja1wiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIHRhZ3M6IFtcbiAgICAgICAgICAgICAgICBcIkNcIixcbiAgICAgICAgICAgICAgICBcIkRcIlxuICAgICAgICAgICAgXVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIGNvbnN0IG1lcmdlRXhhbXBsZVJlY2VpdmVBY3Rpb25Ud28gPSB7XG4gICAgICAgIHR5cGU6ICdURVNUX1JFQ0VJVkUnLFxuICAgICAgICBwYXlsb2FkOiBtZXJnZUV4YW1wbGVQYXlsb2FkVHdvXG4gICAgfTtcblxuICAgIGNvbnN0IG1lcmdlU3RhdGVPbmUgPSBFbnRpdHlSZWR1Y2VyKGV4YW1wbGVTdGF0ZSwgbWVyZ2VFeGFtcGxlUmVjZWl2ZUFjdGlvbk9uZSk7XG4gICAgY29uc3QgbWVyZ2VTdGF0ZVR3byA9IEVudGl0eVJlZHVjZXIobWVyZ2VTdGF0ZU9uZSwgbWVyZ2VFeGFtcGxlUmVjZWl2ZUFjdGlvblR3byk7XG5cbiAgICB0dC5pcyhcbiAgICAgICAgbWVyZ2VTdGF0ZVR3by5nZXRJbihbJ3N1YnJlZGRpdCcsICdNSycsICduYW1lJ10pLFxuICAgICAgICBtZXJnZUV4YW1wbGVQYXlsb2FkVHdvLnN1YnJlZGRpdC5uYW1lLFxuICAgICAgICAnUmVjZWl2aW5nIHVwZGF0ZWQgdmFsdWVzIG9uIHRoZSB0b3AgbGV2ZWwgb2YgYW4gZW50aXR5IGl0ZW0gd2lsbCByZXBsYWNlIGV4aXN0aW5nIHZhbHVlcydcbiAgICApO1xuXG4gICAgdHQudHJ1ZShcbiAgICAgICAgaXMoXG4gICAgICAgICAgICBtZXJnZVN0YXRlVHdvLmdldEluKFsnc3VicmVkZGl0JywgJ01LJywgJ3RhZ3MnXSksXG4gICAgICAgICAgICBmcm9tSlMobWVyZ2VFeGFtcGxlUGF5bG9hZFR3by5zdWJyZWRkaXQudGFncylcbiAgICAgICAgKSxcbiAgICAgICAgJ1JlY2VpdmluZyB1cGRhdGVkIG5vbi1lbnRpdHkgdmFsdWVzIG9uIHRoZSBzZWNvbmQgbGV2ZWwgb2YgYW4gZW50aXR5IGFyZSBub3QgbWVyZ2VkLCB0aGV5IGFyZSByZXBsYWNlZCdcbiAgICApO1xuXG4gICAgdHQuaXMoXG4gICAgICAgIG1lcmdlU3RhdGVUd28uZ2V0SW4oWydzdWJyZWRkaXQnLCAnTUsnLCAnY29kZSddKSxcbiAgICAgICAgbWVyZ2VFeGFtcGxlUGF5bG9hZE9uZS5zdWJyZWRkaXQuY29kZSxcbiAgICAgICAgJ0V4aXN0aW5nIHRvcCBsZXZlbCBrZXlzIGFuZCB2YWx1ZXMgb24gYW4gZW50aXR5IGl0ZW0gd2lsbCByZW1haW4gd2hlbiBzdWJzZXF1ZW50IHJlY2VpdmVkIGRhdGEgZG9lcyBub3QgY29udGFpbiB0aG9zZSB0b3AgbGV2ZWwga2V5cydcbiAgICApO1xuXG4gICAgdHQudHJ1ZShcbiAgICAgICAgaXMoXG4gICAgICAgICAgICBtZXJnZVN0YXRlVHdvLmdldEluKFsndG9wTGlzdGluZ3MnLCAnTlQnXSksXG4gICAgICAgICAgICBmcm9tSlMobWVyZ2VFeGFtcGxlUGF5bG9hZFR3by5zdWJyZWRkaXQudG9wTGlzdGluZ3NbMF0pXG4gICAgICAgICksXG4gICAgICAgICdSZWNlaXZpbmcgdXBkYXRlZCBpbmZvIGZvciBhbiBlbnRpdHkgd2lsbCByZXBsYWNlIG5lc3RlZCBlbnRpdGllcydcbiAgICApO1xuXG4gICAgdHQudHJ1ZShcbiAgICAgICAgaXMoXG4gICAgICAgICAgICBtZXJnZVN0YXRlVHdvLmdldEluKFsndG9wTGlzdGluZ3MnLCAnQ1QnXSksXG4gICAgICAgICAgICBmcm9tSlMobWVyZ2VFeGFtcGxlUGF5bG9hZE9uZS5zdWJyZWRkaXQudG9wTGlzdGluZ3NbMF0pXG4gICAgICAgICksXG4gICAgICAgICdPbmNlIGFuIGVudGl0eSBpcyByZWNlaXZlZCwgaXRzIGVudGl0eSBkYXRhIGlzIHJldGFpbmVkIGV2ZW4gaWYgc3Vic2VxdWVudCByZWNlaXZlZCBlbnRpdGllcyBkb250IGNvbnRhaW4gaXQnXG4gICAgKTtcblxuICAgIHR0LnRydWUoXG4gICAgICAgIGlzKFxuICAgICAgICAgICAgbWVyZ2VTdGF0ZVR3by5nZXRJbihbJ3RvcExpc3RpbmdzJywgJ0dMJ10pLFxuICAgICAgICAgICAgZnJvbUpTKG1lcmdlRXhhbXBsZVBheWxvYWRUd28uc3VicmVkZGl0LnRvcExpc3RpbmdzWzFdKVxuICAgICAgICApLFxuICAgICAgICAnTmV3bHkgcmVjZWl2ZWQgbmVzdGVkIGVudGl0ZXMgYXJlIG1lcmdlZCBpbnRvIHRoZWlyIGVudGl0eSBjb250YWluZXInXG4gICAgKTtcblxufSk7XG4iXX0=