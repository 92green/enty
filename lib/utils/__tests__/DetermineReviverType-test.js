'use strict';

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _DetermineReviverType = require('../DetermineReviverType');

var _DetermineReviverType2 = _interopRequireDefault(_DetermineReviverType);

var _normalizr = require('normalizr');

var _immutable = require('immutable');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//
// Schemas
//


var SubredditSchema = new _normalizr.Schema('subreddit', { idAttribute: 'fullnameId' });
var AuthorSchema = new _normalizr.Schema('author', { idAttribute: 'fullnameId' });
var TopListingSchema = new _normalizr.Schema('topListings', { idAttribute: 'fullnameId' });

TopListingSchema.define({
    author: AuthorSchema
});

SubredditSchema.define({
    topListings: (0, _normalizr.arrayOf)(TopListingSchema)
});

var EntitySchema = {
    subreddit: SubredditSchema
};

(0, _ava2.default)('DetermineReviverType', function (tt) {

    var constructor = function constructor(key, value) {
        return (0, _immutable.Map)({ key: key, value: value });
    };
    var schemaKey = 'mySchemaKey';
    var reviver = (0, _DetermineReviverType2.default)(constructor, schemaKey);

    var exampleMap = (0, _immutable.fromJS)({ abc: 123 });
    var exampleList = (0, _immutable.fromJS)([1, 2, 3]);

    tt.true((0, _immutable.is)(reviver('?', exampleMap).get('value'), exampleMap), 'revivier is transparent to Maps');

    tt.true((0, _immutable.is)(reviver('?', exampleList).get('value'), exampleList), 'revivier is transparent to Lists');

    tt.true((0, _immutable.is)(reviver('?', exampleMap).get('key'), '?'), 'key supplied is returned even when schemaKey is provided');

    tt.true((0, _immutable.is)(reviver("", exampleMap).get('key'), 'mySchemaKey'), 'returned key is schemaKey when no key is provided');

    tt.true((0, _immutable.is)((0, _DetermineReviverType2.default)(function (key, value) {
        return value;
    })('?', exampleMap), exampleMap), 'reviviers output is passed through constructor');
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9fX3Rlc3RzX18vRGV0ZXJtaW5lUmV2aXZlclR5cGUtdGVzdC5qcyJdLCJuYW1lcyI6WyJTdWJyZWRkaXRTY2hlbWEiLCJpZEF0dHJpYnV0ZSIsIkF1dGhvclNjaGVtYSIsIlRvcExpc3RpbmdTY2hlbWEiLCJkZWZpbmUiLCJhdXRob3IiLCJ0b3BMaXN0aW5ncyIsIkVudGl0eVNjaGVtYSIsInN1YnJlZGRpdCIsImNvbnN0cnVjdG9yIiwia2V5IiwidmFsdWUiLCJzY2hlbWFLZXkiLCJyZXZpdmVyIiwiZXhhbXBsZU1hcCIsImFiYyIsImV4YW1wbGVMaXN0IiwidHQiLCJ0cnVlIiwiZ2V0Il0sIm1hcHBpbmdzIjoiOztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7OztBQUVBO0FBQ0E7QUFDQTs7O0FBR0EsSUFBSUEsa0JBQWtCLHNCQUFXLFdBQVgsRUFBd0IsRUFBQ0MsYUFBYSxZQUFkLEVBQXhCLENBQXRCO0FBQ0EsSUFBSUMsZUFBZSxzQkFBVyxRQUFYLEVBQXFCLEVBQUNELGFBQWEsWUFBZCxFQUFyQixDQUFuQjtBQUNBLElBQUlFLG1CQUFtQixzQkFBVyxhQUFYLEVBQTBCLEVBQUNGLGFBQWEsWUFBZCxFQUExQixDQUF2Qjs7QUFFQUUsaUJBQWlCQyxNQUFqQixDQUF3QjtBQUNwQkMsWUFBUUg7QUFEWSxDQUF4Qjs7QUFJQUYsZ0JBQWdCSSxNQUFoQixDQUF1QjtBQUNuQkUsaUJBQWEsd0JBQVFILGdCQUFSO0FBRE0sQ0FBdkI7O0FBSUEsSUFBTUksZUFBZTtBQUNqQkMsZUFBV1I7QUFETSxDQUFyQjs7QUFJQSxtQkFBSyxzQkFBTCxFQUE2QixjQUFNOztBQUUvQixRQUFNUyxjQUFjLFNBQWRBLFdBQWMsQ0FBQ0MsR0FBRCxFQUFNQyxLQUFOO0FBQUEsZUFBZ0Isb0JBQUksRUFBQ0QsUUFBRCxFQUFNQyxZQUFOLEVBQUosQ0FBaEI7QUFBQSxLQUFwQjtBQUNBLFFBQU1DLFlBQVksYUFBbEI7QUFDQSxRQUFNQyxVQUFVLG9DQUFxQkosV0FBckIsRUFBa0NHLFNBQWxDLENBQWhCOztBQUVBLFFBQU1FLGFBQWEsdUJBQU8sRUFBQ0MsS0FBSyxHQUFOLEVBQVAsQ0FBbkI7QUFDQSxRQUFNQyxjQUFjLHVCQUFPLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLENBQVAsQ0FBcEI7O0FBRUFDLE9BQUdDLElBQUgsQ0FDSSxtQkFDSUwsUUFBUSxHQUFSLEVBQWFDLFVBQWIsRUFBeUJLLEdBQXpCLENBQTZCLE9BQTdCLENBREosRUFFSUwsVUFGSixDQURKLEVBS0ksaUNBTEo7O0FBUUFHLE9BQUdDLElBQUgsQ0FDSSxtQkFDSUwsUUFBUSxHQUFSLEVBQWFHLFdBQWIsRUFBMEJHLEdBQTFCLENBQThCLE9BQTlCLENBREosRUFFSUgsV0FGSixDQURKLEVBS0ksa0NBTEo7O0FBUUFDLE9BQUdDLElBQUgsQ0FDSSxtQkFDSUwsUUFBUSxHQUFSLEVBQWFDLFVBQWIsRUFBeUJLLEdBQXpCLENBQTZCLEtBQTdCLENBREosRUFFSSxHQUZKLENBREosRUFLSSwwREFMSjs7QUFRQUYsT0FBR0MsSUFBSCxDQUNJLG1CQUNJTCxRQUFRLEVBQVIsRUFBWUMsVUFBWixFQUF3QkssR0FBeEIsQ0FBNEIsS0FBNUIsQ0FESixFQUVJLGFBRkosQ0FESixFQUtJLG1EQUxKOztBQVFBRixPQUFHQyxJQUFILENBQ0ksbUJBQ0ksb0NBQXFCLFVBQUNSLEdBQUQsRUFBTUMsS0FBTjtBQUFBLGVBQWdCQSxLQUFoQjtBQUFBLEtBQXJCLEVBQTRDLEdBQTVDLEVBQWlERyxVQUFqRCxDQURKLEVBRUlBLFVBRkosQ0FESixFQUtJLGdEQUxKO0FBT0gsQ0FoREQiLCJmaWxlIjoiRGV0ZXJtaW5lUmV2aXZlclR5cGUtdGVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0ZXN0IGZyb20gJ2F2YSc7XG5pbXBvcnQgRGV0ZXJtaW5lUmV2aXZlclR5cGUgZnJvbSAnLi4vRGV0ZXJtaW5lUmV2aXZlclR5cGUnO1xuaW1wb3J0IHtTY2hlbWEsIGFycmF5T2Z9IGZyb20gJ25vcm1hbGl6cic7XG5pbXBvcnQge2lzLCBmcm9tSlMsIE1hcH0gZnJvbSAnaW1tdXRhYmxlJztcblxuLy9cbi8vIFNjaGVtYXNcbi8vXG5cblxudmFyIFN1YnJlZGRpdFNjaGVtYSA9IG5ldyBTY2hlbWEoJ3N1YnJlZGRpdCcsIHtpZEF0dHJpYnV0ZTogJ2Z1bGxuYW1lSWQnfSk7XG52YXIgQXV0aG9yU2NoZW1hID0gbmV3IFNjaGVtYSgnYXV0aG9yJywge2lkQXR0cmlidXRlOiAnZnVsbG5hbWVJZCd9KTtcbnZhciBUb3BMaXN0aW5nU2NoZW1hID0gbmV3IFNjaGVtYSgndG9wTGlzdGluZ3MnLCB7aWRBdHRyaWJ1dGU6ICdmdWxsbmFtZUlkJ30pO1xuXG5Ub3BMaXN0aW5nU2NoZW1hLmRlZmluZSh7XG4gICAgYXV0aG9yOiBBdXRob3JTY2hlbWFcbn0pO1xuXG5TdWJyZWRkaXRTY2hlbWEuZGVmaW5lKHtcbiAgICB0b3BMaXN0aW5nczogYXJyYXlPZihUb3BMaXN0aW5nU2NoZW1hKVxufSk7XG5cbmNvbnN0IEVudGl0eVNjaGVtYSA9IHtcbiAgICBzdWJyZWRkaXQ6IFN1YnJlZGRpdFNjaGVtYVxufVxuXG50ZXN0KCdEZXRlcm1pbmVSZXZpdmVyVHlwZScsIHR0ID0+IHtcblxuICAgIGNvbnN0IGNvbnN0cnVjdG9yID0gKGtleSwgdmFsdWUpID0+IE1hcCh7a2V5LCB2YWx1ZX0pO1xuICAgIGNvbnN0IHNjaGVtYUtleSA9ICdteVNjaGVtYUtleSc7XG4gICAgY29uc3QgcmV2aXZlciA9IERldGVybWluZVJldml2ZXJUeXBlKGNvbnN0cnVjdG9yLCBzY2hlbWFLZXkpO1xuXG4gICAgY29uc3QgZXhhbXBsZU1hcCA9IGZyb21KUyh7YWJjOiAxMjN9KTtcbiAgICBjb25zdCBleGFtcGxlTGlzdCA9IGZyb21KUyhbMSwyLDNdKTtcblxuICAgIHR0LnRydWUoXG4gICAgICAgIGlzKFxuICAgICAgICAgICAgcmV2aXZlcignPycsIGV4YW1wbGVNYXApLmdldCgndmFsdWUnKSxcbiAgICAgICAgICAgIGV4YW1wbGVNYXBcbiAgICAgICAgKSxcbiAgICAgICAgJ3Jldml2aWVyIGlzIHRyYW5zcGFyZW50IHRvIE1hcHMnXG4gICAgKTtcblxuICAgIHR0LnRydWUoXG4gICAgICAgIGlzKFxuICAgICAgICAgICAgcmV2aXZlcignPycsIGV4YW1wbGVMaXN0KS5nZXQoJ3ZhbHVlJyksXG4gICAgICAgICAgICBleGFtcGxlTGlzdFxuICAgICAgICApLFxuICAgICAgICAncmV2aXZpZXIgaXMgdHJhbnNwYXJlbnQgdG8gTGlzdHMnXG4gICAgKTtcblxuICAgIHR0LnRydWUoXG4gICAgICAgIGlzKFxuICAgICAgICAgICAgcmV2aXZlcignPycsIGV4YW1wbGVNYXApLmdldCgna2V5JyksXG4gICAgICAgICAgICAnPydcbiAgICAgICAgKSxcbiAgICAgICAgJ2tleSBzdXBwbGllZCBpcyByZXR1cm5lZCBldmVuIHdoZW4gc2NoZW1hS2V5IGlzIHByb3ZpZGVkJ1xuICAgICk7XG5cbiAgICB0dC50cnVlKFxuICAgICAgICBpcyhcbiAgICAgICAgICAgIHJldml2ZXIoXCJcIiwgZXhhbXBsZU1hcCkuZ2V0KCdrZXknKSxcbiAgICAgICAgICAgICdteVNjaGVtYUtleSdcbiAgICAgICAgKSxcbiAgICAgICAgJ3JldHVybmVkIGtleSBpcyBzY2hlbWFLZXkgd2hlbiBubyBrZXkgaXMgcHJvdmlkZWQnXG4gICAgKTtcblxuICAgIHR0LnRydWUoXG4gICAgICAgIGlzKFxuICAgICAgICAgICAgRGV0ZXJtaW5lUmV2aXZlclR5cGUoKGtleSwgdmFsdWUpID0+IHZhbHVlKSgnPycsIGV4YW1wbGVNYXApLFxuICAgICAgICAgICAgZXhhbXBsZU1hcFxuICAgICAgICApLFxuICAgICAgICAncmV2aXZpZXJzIG91dHB1dCBpcyBwYXNzZWQgdGhyb3VnaCBjb25zdHJ1Y3RvcidcbiAgICApO1xufSk7XG4iXX0=